/*
 * MoveAction.h
 *
 *  Created on: 2016/11/11
 *      Author: kerikun11
 */

#ifndef MOVEACTION_H_
#define MOVEACTION_H_

#include "mbed.h"
#include "config.h"

#define MOVE_ACTION_PERIOD			1000
#define WALL_ATTACH_ENABLED			false
#define WALL_AVOID_ENABLED			false

#define LOOK_AHEAD_UNIT				5
#define TRAJECTORY_PROP_GAIN		20
#define TRAJECTORY_INTEGRAL_GAIN	0

class Trajectory {
public:
	Trajectory(bool mirror = false) :
			mirror(mirror) {
		reset();
	}
	virtual ~Trajectory() {
	}
	void reset() {
		last_index = 0;
	}
	Position getNextDir(const Position &cur, const float velocity) {
		int look_ahead = LOOK_AHEAD_UNIT * (1 + 20 * velocity * velocity / v_const / v_const);
		Position dir = (getNextPoint(cur, look_ahead) - cur).rotate(-cur.theta);
		dir.theta = atan(dir.y / (dir.x + interval));
		dir *= velocity / look_ahead;
		return dir;
	}
	float getPortion() const {
		return (float) last_index / getSize();
	}
	Position getEndPosition() {
		return getPosition(getSize() - 1);
	}
protected:
	bool mirror;
	int last_index;
	const float interval = 1.0f;
	const float v_const = 1000.0f;
	virtual int size() const {
		return 180;
	}
	virtual Position position(int index) const {
		return Position(index * interval, 0, 0);
	}
	int getSize() const {
		return size();
	}
	Position getPosition(const int index) {
		if (mirror) {
			return position(index).mirror_x();
		} else {
			return position(index);
		}
	}
	Position getNextPoint(const Position& pos, int look_ahead) {
		for (int i = last_index; i < 180 * 32; i++) {
			Position target = getPosition(i);
			Position dir = (target - pos).rotate(-target.theta);
			if (dir.x > 0) {
				last_index = i;
				return getPosition(last_index + 1 + look_ahead);
			}
		}
		return Position(0, 0, 0);
	}
};

class Curve90: public Trajectory {
public:
	Curve90(bool mirror = false) :
			Trajectory(mirror) {
	}
private:
	virtual int size() const {
		return 152;
	}
	virtual Position position(int index) const {
		static const float data[][3] = { { 0, 0, 0 }, { 1, 0, 0 }, { 2, 0, 0 }, { 3, 0, 0 }, { 4, 0,
				0 }, { 5, 0, 0 }, { 6, 0, 0 }, { 7, 0, 0 }, { 8, 0, 0 }, { 9.8969, 0, 0 }, { 10.897,
				0, 0 }, { 11.897, 0, 0 }, { 12.897, 0.00060392, 0.00060392 }, { 13.897, 0.0024157,
				0.0018118 }, { 14.897, 0.0060392, 0.0036235 }, { 15.897, 0.012078, 0.0060392 }, {
				16.897, 0.021137, 0.0090588 }, { 17.897, 0.033819, 0.012682 }, { 18.897, 0.050728,
				0.01691 }, { 19.896, 0.072467, 0.021741 }, { 20.896, 0.09964, 0.027176 }, { 21.895,
				0.13285, 0.033216 }, { 22.895, 0.1727, 0.039859 }, { 23.894, 0.21979, 0.047106 }, {
				24.892, 0.27472, 0.054957 }, { 25.89, 0.33808, 0.063412 }, { 26.887, 0.41049,
				0.07247 }, { 27.884, 0.49253, 0.082133 }, { 28.88, 0.5848, 0.0924 }, { 29.874,
				0.68789, 0.10327 }, { 30.868, 0.80238, 0.11474 }, { 31.86, 0.92886, 0.12682 }, {
				32.85, 1.0679, 0.13951 }, { 33.838, 1.2201, 0.15279 }, { 34.825, 1.386, 0.16668 }, {
				35.808, 1.5662, 0.18118 }, { 36.789, 1.7612, 0.19627 }, { 37.767, 1.971, 0.21137 },
				{ 38.741, 2.1956, 0.22647 }, { 39.712, 2.4348, 0.24157 },
				{ 40.679, 2.6887, 0.25667 }, { 41.643, 2.9571, 0.27176 }, { 42.602, 3.24, 0.28686 },
				{ 43.557, 3.5374, 0.30196 }, { 44.507, 3.8492, 0.31706 },
				{ 45.452, 4.1753, 0.33216 }, { 46.392, 4.5156, 0.34725 },
				{ 47.328, 4.8701, 0.36235 }, { 48.257, 5.2386, 0.37745 },
				{ 49.181, 5.6212, 0.39255 }, { 50.099, 6.0176, 0.40765 },
				{ 51.011, 6.4279, 0.42274 }, { 51.917, 6.8519, 0.43784 },
				{ 52.816, 7.2895, 0.45294 }, { 53.708, 7.7406, 0.46804 },
				{ 54.594, 8.2052, 0.48314 }, { 55.472, 8.683, 0.49823 },
				{ 56.343, 9.1741, 0.51333 }, { 57.207, 9.6783, 0.52843 },
				{ 58.063, 10.195, 0.54353 }, { 58.911, 10.725, 0.55863 },
				{ 59.751, 11.268, 0.57372 }, { 60.582, 11.824, 0.58882 },
				{ 61.406, 12.392, 0.60392 }, { 62.22, 12.972, 0.61902 },
				{ 63.026, 13.564, 0.63412 }, { 63.822, 14.169, 0.64921 },
				{ 64.609, 14.785, 0.66431 }, { 65.387, 15.414, 0.67941 },
				{ 66.156, 16.054, 0.69451 }, { 66.914, 16.705, 0.70961 },
				{ 67.663, 17.368, 0.7247 }, { 68.402, 18.042, 0.7398 }, { 69.13, 18.727, 0.7549 }, {
						69.848, 19.424, 0.77 }, { 70.555, 20.13, 0.7851 },
				{ 71.252, 20.848, 0.80019 }, { 71.938, 21.576, 0.81529 },
				{ 72.612, 22.314, 0.83039 }, { 73.275, 23.062, 0.84549 },
				{ 73.927, 23.821, 0.86059 }, { 74.568, 24.589, 0.87568 },
				{ 75.197, 25.366, 0.89078 }, { 75.814, 26.153, 0.90588 },
				{ 76.419, 26.949, 0.92098 }, { 77.012, 27.755, 0.93608 },
				{ 77.592, 28.569, 0.95117 }, { 78.161, 29.391, 0.96627 },
				{ 78.717, 30.223, 0.98137 }, { 79.26, 31.062, 0.99647 }, { 79.791, 31.91, 1.0116 },
				{ 80.308, 32.765, 1.0267 }, { 80.813, 33.629, 1.0418 }, { 81.304, 34.5, 1.0569 }, {
						81.783, 35.378, 1.072 }, { 82.248, 36.263, 1.0871 },
				{ 82.7, 37.155, 1.1022 }, { 83.138, 38.054, 1.1173 }, { 83.562, 38.959, 1.1324 }, {
						83.973, 39.871, 1.1474 }, { 84.37, 40.789, 1.1625 }, { 84.753, 41.713,
						1.1776 }, { 85.122, 42.642, 1.1927 }, { 85.477, 43.577, 1.2078 }, { 85.818,
						44.517, 1.2229 }, { 86.145, 45.462, 1.238 }, { 86.457, 46.412, 1.2531 }, {
						86.755, 47.367, 1.2682 }, { 87.039, 48.326, 1.2833 }, { 87.308, 49.289,
						1.2984 }, { 87.562, 50.256, 1.3135 }, { 87.802, 51.227, 1.3286 }, { 88.027,
						52.201, 1.3437 }, { 88.238, 53.179, 1.3588 }, { 88.433, 54.159, 1.3739 }, {
						88.614, 55.143, 1.389 }, { 88.78, 56.129, 1.4041 },
				{ 88.932, 57.117, 1.418 }, { 89.071, 58.108, 1.4313 }, { 89.198, 59.1, 1.444 }, {
						89.312, 60.093, 1.4561 }, { 89.415, 61.088, 1.4675 }, { 89.507, 62.083,
						1.4784 }, { 89.59, 63.08, 1.4887 }, { 89.662, 64.077, 1.4983 }, { 89.725,
						65.075, 1.5074 }, { 89.78, 66.074, 1.5158 }, { 89.827, 67.073, 1.5237 }, {
						89.867, 68.072, 1.5309 }, { 89.9, 69.072, 1.5376 },
				{ 89.928, 70.071, 1.5436 }, { 89.949, 71.071, 1.5491 }, { 89.966, 72.071, 1.5539 },
				{ 89.979, 73.071, 1.5581 }, { 89.988, 74.071, 1.5617 }, { 89.994, 75.071, 1.5648 },
				{ 89.998, 76.071, 1.5672 }, { 89.999, 77.071, 1.569 }, { 90, 78.071, 1.5702 }, { 90,
						79.071, 1.5708 }, { 90, 80.071, 1.5708 }, { 90, 80.071, 1.5708 }, { 90,
						81.071, 1.5708 }, { 90, 82.071, 1.5708 }, { 90, 83.071, 1.5708 }, { 90,
						84.071, 1.5708 }, { 90, 85.071, 1.5708 }, { 90, 86.071, 1.5708 }, { 90,
						87.071, 1.5708 }, { 90, 88.071, 1.5708 }, { 90, 89.071, 1.5708 }, { 90, 90,
						1.5708 }, };
		if (index < 0) {
			return Position(0, 0 + interval * index, 0);
		} else if (index > getSize() - 1) {
			Position end(data[getSize() - 1][0], data[getSize() - 1][1], data[getSize() - 1][2]);
			return end
					+ Position((index - getSize() + 1) * interval * cos(end.theta),
							(index - getSize() + 1) * interval * sin(end.theta), 0);
		} else {
			return Position(data[index][0], data[index][1], data[index][2]);
		}
	}
};

class Curve4545: public Trajectory {
public:
	Curve4545(bool mirror = false) :
			Trajectory(mirror) {
	}
private:
	virtual int size() const {
		return 216;
	}
	virtual Position position(int index) const {
		static const float data[][3] = { { 0, 0, 0 }, { 1, 0, 0 }, { 2.0321, 0, 0 },
				{ 3.0321, 0, 0 }, { 4.0321, 0, 0 }, { 5.0321, 0.00015098, 0.00015098 }, { 6.0321,
						0.00060392, 0.00045294 }, { 7.0321, 0.0015098, 0.00090588 }, { 8.0321,
						0.0030196, 0.0015098 }, { 9.0321, 0.0052843, 0.0022647 }, { 10.032,
						0.0084549, 0.0031706 }, { 11.032, 0.012682, 0.0042274 }, { 12.032, 0.018118,
						0.0054353 }, { 13.032, 0.024912, 0.0067941 },
				{ 14.032, 0.033215, 0.0083039 }, { 15.032, 0.04318, 0.0099647 }, { 16.032, 0.054956,
						0.011776 }, { 17.032, 0.068695, 0.013739 }, { 18.032, 0.084547, 0.015853 },
				{ 19.031, 0.10266, 0.018118 }, { 20.031, 0.1232, 0.020533 }, { 21.031, 0.14629,
						0.0231 }, { 22.031, 0.17211, 0.025818 }, { 23.03, 0.20079, 0.028686 }, {
						24.03, 0.23249, 0.031706 }, { 25.029, 0.26736, 0.034876 }, { 26.028,
						0.30555, 0.038198 }, { 27.028, 0.34721, 0.04167 }, { 28.027, 0.39249,
						0.045294 }, { 29.025, 0.44153, 0.049069 }, { 30.024, 0.4945, 0.052994 }, {
						31.022, 0.55154, 0.05707 }, { 32.02, 0.6128, 0.061298 }, { 33.018, 0.67843,
						0.065676 }, { 34.016, 0.74858, 0.070206 }, { 35.013, 0.8234, 0.074886 }, {
						36.01, 0.90303, 0.079717 }, { 37.006, 0.98763, 0.0847 }, { 38.002, 1.0773,
						0.089833 }, { 38.998, 1.1723, 0.095117 }, { 39.993, 1.2727, 0.10055 }, {
						40.987, 1.3786, 0.10614 }, { 41.981, 1.4903, 0.11188 }, { 42.974, 1.6078,
						0.11776 }, { 43.966, 1.7313, 0.1238 }, { 44.958, 1.8609, 0.12999 }, {
						45.948, 1.9968, 0.13633 }, { 46.938, 2.1391, 0.14283 }, { 47.927, 2.2881,
						0.14947 }, { 48.915, 2.4437, 0.15626 }, { 49.902, 2.6062, 0.16321 }, {
						50.887, 2.7757, 0.17031 }, { 51.871, 2.9523, 0.17755 }, { 52.854, 3.1362,
						0.18495 }, { 53.836, 3.3275, 0.1925 }, { 54.816, 3.5264, 0.2002 }, { 55.794,
						3.7329, 0.20805 }, { 56.771, 3.9473, 0.21605 }, { 57.746, 4.1696, 0.22421 },
				{ 58.719, 4.4, 0.23251 }, { 59.69, 4.6387, 0.24096 }, { 60.659, 4.8857, 0.24957 }, {
						61.626, 5.1411, 0.25833 }, { 62.591, 5.4052, 0.26723 }, { 63.553, 5.678,
						0.27629 }, { 64.512, 5.9596, 0.2855 }, { 65.469, 6.2502, 0.29486 }, {
						66.423, 6.5499, 0.30438 }, { 67.374, 6.8588, 0.31404 }, { 68.322, 7.1771,
						0.32385 }, { 69.267, 7.5047, 0.33382 }, { 70.208, 7.8419, 0.34393 }, {
						71.146, 8.1887, 0.3542 }, { 72.081, 8.5453, 0.36462 }, { 73.011, 8.9118,
						0.37519 }, { 73.938, 9.2882, 0.3859 }, { 74.86, 9.6746, 0.39678 }, { 75.778,
						10.071, 0.4078 }, { 76.691, 10.478, 0.41897 }, { 77.6, 10.895, 0.43029 }, {
						78.504, 11.323, 0.44177 }, { 79.403, 11.761, 0.45339 }, { 80.297, 12.209,
						0.46517 }, { 81.185, 12.668, 0.4771 }, { 82.068, 13.138, 0.48918 }, {
						82.945, 13.619, 0.5014 }, { 83.816, 14.111, 0.51379 }, { 84.68, 14.613,
						0.52632 }, { 85.539, 15.126, 0.53895 }, { 86.39, 15.65, 0.55159 }, { 87.235,
						16.185, 0.56422 }, { 88.074, 16.73, 0.57686 }, { 88.905, 17.286, 0.58949 },
				{ 89.729, 17.853, 0.60213 }, { 90.546, 18.429, 0.61477 },
				{ 91.355, 19.016, 0.6274 }, { 92.157, 19.614, 0.64004 },
				{ 92.952, 20.221, 0.65267 }, { 93.739, 20.838, 0.66531 },
				{ 94.518, 21.465, 0.67794 }, { 95.288, 22.102, 0.69058 },
				{ 96.051, 22.749, 0.70321 }, { 96.806, 23.405, 0.71585 },
				{ 97.552, 24.071, 0.72849 }, { 98.29, 24.746, 0.74112 },
				{ 99.019, 25.431, 0.75376 }, { 99.739, 26.124, 0.76639 },
				{ 100.45, 26.827, 0.77903 }, { 101.15, 27.538, 0.79166 },
				{ 101.85, 28.259, 0.8043 }, { 102.53, 28.988, 0.81694 },
				{ 103.21, 29.725, 0.82957 }, { 103.87, 30.471, 0.84221 },
				{ 104.53, 31.226, 0.85484 }, { 105.18, 31.989, 0.86748 },
				{ 105.81, 32.759, 0.88011 }, { 106.44, 33.538, 0.89275 },
				{ 107.06, 34.325, 0.90538 }, { 107.66, 35.119, 0.91802 },
				{ 108.26, 35.921, 0.93066 }, { 108.85, 36.731, 0.94329 },
				{ 109.43, 37.548, 0.95593 }, { 109.99, 38.372, 0.96856 },
				{ 110.55, 39.203, 0.9812 }, { 111.09, 40.041, 0.99383 }, { 111.63, 40.886, 1.0065 },
				{ 112.15, 41.738, 1.0191 }, { 112.67, 42.596, 1.0317 }, { 113.17, 43.46, 1.0444 }, {
						113.66, 44.331, 1.057 }, { 114.14, 45.208, 1.0694 }, { 114.61, 46.091,
						1.0816 }, { 115.07, 46.979, 1.0937 }, { 115.52, 47.873, 1.1056 }, { 115.96,
						48.772, 1.1174 }, { 116.38, 49.676, 1.129 }, { 116.8, 50.585, 1.1405 }, {
						117.21, 51.498, 1.1518 }, { 117.6, 52.416, 1.163 },
				{ 117.99, 53.339, 1.174 }, { 118.37, 54.265, 1.1849 }, { 118.73, 55.196, 1.1956 }, {
						119.09, 56.13, 1.2062 }, { 119.44, 57.068, 1.2166 }, { 119.77, 58.009,
						1.2269 }, { 120.1, 58.954, 1.237 }, { 120.42, 59.902, 1.2469 }, { 120.73,
						60.853, 1.2568 }, { 121.03, 61.807, 1.2664 }, { 121.32, 62.764, 1.2759 }, {
						121.6, 63.723, 1.2853 }, { 121.87, 64.686, 1.2945 },
				{ 122.14, 65.65, 1.3036 }, { 122.39, 66.617, 1.3125 }, { 122.64, 67.586, 1.3212 }, {
						122.88, 68.557, 1.3298 }, { 123.11, 69.53, 1.3383 }, { 123.33, 70.505,
						1.3466 }, { 123.55, 71.482, 1.3547 }, { 123.75, 72.46, 1.3627 }, { 123.95,
						73.44, 1.3706 }, { 124.14, 74.422, 1.3783 }, { 124.33, 75.405, 1.3858 }, {
						124.5, 76.389, 1.3932 }, { 124.67, 77.375, 1.4005 }, { 124.84, 78.361,
						1.4076 }, { 124.99, 79.349, 1.4145 }, { 125.14, 80.338, 1.4213 }, { 125.28,
						81.328, 1.428 }, { 125.42, 82.318, 1.4345 }, { 125.55, 83.31, 1.4408 }, {
						125.67, 84.302, 1.447 }, { 125.79, 85.295, 1.453 },
				{ 125.9, 86.289, 1.4589 }, { 126.01, 87.284, 1.4647 }, { 126.11, 88.278, 1.4702 }, {
						126.2, 89.274, 1.4757 }, { 126.29, 90.27, 1.481 },
				{ 126.38, 91.266, 1.4861 }, { 126.46, 92.263, 1.4911 }, { 126.53, 93.26, 1.4959 }, {
						126.6, 94.258, 1.5006 }, { 126.67, 95.256, 1.5051 }, { 126.73, 96.254,
						1.5095 }, { 126.78, 97.252, 1.5137 }, { 126.84, 98.251, 1.5178 }, { 126.89,
						99.25, 1.5217 }, { 126.93, 100.25, 1.5255 }, { 126.97, 101.25, 1.5291 }, {
						127.01, 102.25, 1.5326 }, { 127.05, 103.25, 1.5359 }, { 127.08, 104.25,
						1.5391 }, { 127.11, 105.25, 1.5421 }, { 127.13, 106.25, 1.545 }, { 127.16,
						107.24, 1.5477 }, { 127.18, 108.24, 1.5503 }, { 127.19, 109.24, 1.5527 }, {
						127.21, 110.24, 1.5549 }, { 127.22, 111.24, 1.5571 }, { 127.24, 112.24,
						1.559 }, { 127.25, 113.24, 1.5608 }, { 127.25, 114.24, 1.5625 }, { 127.26,
						115.24, 1.564 }, { 127.27, 116.24, 1.5654 }, { 127.27, 117.24, 1.5666 }, {
						127.27, 118.24, 1.5676 }, { 127.28, 119.24, 1.5685 }, { 127.28, 120.24,
						1.5693 }, { 127.28, 121.24, 1.5699 }, { 127.28, 122.24, 1.5703 }, { 127.28,
						123.24, 1.5706 }, { 127.28, 124.24, 1.5708 }, { 127.28, 125.24, 1.5708 }, {
						127.28, 125.24, 1.5708 }, { 127.28, 126.24, 1.5708 }, { 127.2792, 127.2792,
						1.5708 }, };
		if (index < 0) {
			return Position(0, 0 + interval * index, 0);
		} else if (index > getSize() - 1) {
			Position end(data[getSize() - 1][0], data[getSize() - 1][1], data[getSize() - 1][2]);
			return end
					+ Position((index - getSize() + 1) * interval * cos(end.theta),
							(index - getSize() + 1) * interval * sin(end.theta), 0);
		} else {
			return Position(data[index][0], data[index][1], data[index][2]);
		}
	}
};

class Curve45S45: public Trajectory {
public:
	Curve45S45(bool mirror = false) :
			Trajectory(mirror) {
	}
private:
	virtual int size() const {
		return 430;
	}
	virtual Position position(int index) const {
		static const float data[][3] = { { 0, 0, 0 }, { 1, 0, 0 }, { 2, 0, 0 }, { 3, 0, 0 }, { 4, 0,
				0 }, { 5.0638, 0, 0 }, { 6.0638, 0, 0 }, { 7.0638, 0, 0 }, { 8.0638, 3.7745e-05,
				3.7745e-05 }, { 9.0638, 0.00015098, 0.00011324 },
				{ 10.064, 0.00037745, 0.00022647 }, { 11.064, 0.0007549, 0.00037745 }, { 12.064,
						0.0013211, 0.00056618 }, { 13.064, 0.0021137, 0.00079265 }, { 14.064,
						0.0031706, 0.0010569 }, { 15.064, 0.0045294, 0.0013588 }, { 16.064,
						0.0062279, 0.0016985 }, { 17.064, 0.0083039, 0.002076 }, { 18.064, 0.010795,
						0.0024912 }, { 19.064, 0.013739, 0.0029441 },
				{ 20.064, 0.017174, 0.0034348 }, { 21.064, 0.021137, 0.0039632 }, { 22.064,
						0.025667, 0.0045294 }, { 23.064, 0.0308, 0.0051333 }, { 24.064, 0.036575,
						0.005775 }, { 25.064, 0.043029, 0.0064544 },
				{ 26.064, 0.050201, 0.0071716 }, { 27.064, 0.058127, 0.0079265 }, { 28.064,
						0.066846, 0.0087191 }, { 29.064, 0.076395, 0.0095495 }, { 30.064, 0.086813,
						0.010418 }, { 31.063, 0.098136, 0.011324 }, { 32.063, 0.1104, 0.012267 }, {
						33.063, 0.12365, 0.013248 }, { 34.063, 0.13792, 0.014268 }, { 35.063,
						0.15324, 0.015324 }, { 36.063, 0.16966, 0.016419 }, { 37.063, 0.18721,
						0.017551 }, { 38.063, 0.20593, 0.018722 }, { 39.062, 0.22586, 0.019929 }, {
						40.062, 0.24703, 0.021175 }, { 41.062, 0.26949, 0.022458 }, { 42.062,
						0.29327, 0.023779 }, { 43.061, 0.3184, 0.025138 }, { 44.061, 0.34493,
						0.026535 }, { 45.061, 0.3729, 0.027969 }, { 46.06, 0.40234, 0.029441 }, {
						47.06, 0.43328, 0.030951 }, { 48.059, 0.46577, 0.032498 }, { 49.059,
						0.49985, 0.034084 }, { 50.058, 0.53555, 0.035707 }, { 51.057, 0.57291,
						0.037368 }, { 52.056, 0.61197, 0.039066 }, { 53.056, 0.65276, 0.040802 }, {
						54.055, 0.69532, 0.042576 }, { 55.054, 0.73969, 0.044388 }, { 56.053,
						0.78591, 0.046238 }, { 57.052, 0.83402, 0.048125 }, { 58.05, 0.88405,
						0.05005 }, { 59.049, 0.93604, 0.052013 }, { 60.047, 0.99003, 0.054013 }, {
						61.046, 1.046, 0.056051 }, { 62.044, 1.1041, 0.058127 }, { 63.042, 1.1643,
						0.060241 }, { 64.04, 1.2267, 0.062393 }, { 65.038, 1.2912, 0.064582 }, {
						66.036, 1.358, 0.066809 }, { 67.034, 1.427, 0.069073 }, { 68.031, 1.4983,
						0.071376 }, { 69.028, 1.572, 0.073716 }, { 70.026, 1.648, 0.076094 }, {
						71.022, 1.7264, 0.07851 }, { 72.019, 1.8073, 0.080963 }, { 73.016, 1.8907,
						0.083454 }, { 74.012, 1.9765, 0.085983 }, { 75.008, 2.065, 0.08855 }, {
						76.004, 2.156, 0.091154 }, { 77, 2.2497, 0.093796 }, { 77.995, 2.346,
						0.096476 }, { 78.99, 2.445, 0.099194 }, { 79.985, 2.5468, 0.10195 }, {
						80.979, 2.6513, 0.10474 }, { 81.974, 2.7587, 0.10757 }, { 82.967, 2.8689,
						0.11044 }, { 83.961, 2.982, 0.11335 }, { 84.954, 3.0981, 0.11629 }, {
						85.947, 3.2171, 0.11927 }, { 86.94, 3.339, 0.12229 }, { 87.932, 3.4641,
						0.12535 }, { 88.924, 3.5922, 0.12845 }, { 89.915, 3.7234, 0.13158 }, {
						90.906, 3.8577, 0.13475 }, { 91.896, 3.9952, 0.13796 }, { 92.886, 4.136,
						0.1412 }, { 93.876, 4.2799, 0.14449 }, { 94.865, 4.4272, 0.14781 }, {
						95.854, 4.5778, 0.15117 }, { 96.842, 4.7318, 0.15457 }, { 97.829, 4.8891,
						0.158 }, { 98.816, 5.0499, 0.16147 }, { 99.803, 5.2141, 0.16498 }, { 100.79,
						5.3818, 0.16853 }, { 101.77, 5.5531, 0.17212 }, { 102.76, 5.728, 0.17574 },
				{ 103.74, 5.9064, 0.1794 }, { 104.73, 6.0885, 0.1831 }, { 105.71, 6.2742, 0.18684 },
				{ 106.69, 6.4637, 0.19061 }, { 107.67, 6.6569, 0.19442 },
				{ 108.65, 6.8539, 0.19827 }, { 109.63, 7.0547, 0.20216 },
				{ 110.61, 7.2593, 0.20609 }, { 111.59, 7.4678, 0.21005 },
				{ 112.57, 7.6802, 0.21405 }, { 113.54, 7.8966, 0.21809 },
				{ 114.52, 8.1169, 0.22217 }, { 115.49, 8.3413, 0.22628 },
				{ 116.47, 8.5697, 0.23043 }, { 117.44, 8.8022, 0.23462 },
				{ 118.41, 9.0387, 0.23885 }, { 119.38, 9.2795, 0.24312 },
				{ 120.35, 9.5244, 0.24742 }, { 121.32, 9.7735, 0.25176 },
				{ 122.29, 10.027, 0.25614 }, { 123.25, 10.284, 0.26055 },
				{ 124.22, 10.546, 0.26501 }, { 125.18, 10.813, 0.2695 },
				{ 126.14, 11.083, 0.27403 }, { 127.1, 11.358, 0.2786 }, { 128.06, 11.638, 0.2832 },
				{ 129.02, 11.922, 0.28784 }, { 129.98, 12.21, 0.29252 },
				{ 130.94, 12.503, 0.29724 }, { 131.89, 12.8, 0.302 }, { 132.85, 13.102, 0.30679 }, {
						133.8, 13.409, 0.31162 }, { 134.75, 13.72, 0.31649 }, { 135.7, 14.036,
						0.3214 }, { 136.64, 14.357, 0.32634 }, { 137.59, 14.682, 0.33133 }, {
						138.53, 15.012, 0.33635 }, { 139.48, 15.347, 0.3414 }, { 140.42, 15.686,
						0.3465 }, { 141.35, 16.031, 0.35163 }, { 142.29, 16.38, 0.3568 }, { 143.23,
						16.734, 0.36201 }, { 144.16, 17.093, 0.36726 }, { 145.09, 17.457, 0.37254 },
				{ 146.02, 17.826, 0.37787 }, { 146.95, 18.2, 0.38323 }, { 147.87, 18.579, 0.38862 },
				{ 148.8, 18.963, 0.39406 }, { 149.72, 19.352, 0.39953 },
				{ 150.64, 19.746, 0.40504 }, { 151.55, 20.145, 0.41059 },
				{ 152.47, 20.549, 0.41618 }, { 153.38, 20.959, 0.4218 },
				{ 154.29, 21.373, 0.42746 }, { 155.2, 21.793, 0.43316 }, { 156.1, 22.218, 0.4389 },
				{ 157.01, 22.648, 0.44467 }, { 157.91, 23.084, 0.45049 },
				{ 158.81, 23.524, 0.45634 }, { 159.7, 23.97, 0.46223 }, { 160.59, 24.421, 0.46815 },
				{ 161.48, 24.878, 0.47412 }, { 162.37, 25.34, 0.48012 },
				{ 163.25, 25.807, 0.48616 }, { 164.13, 26.28, 0.49223 },
				{ 165.01, 26.758, 0.49835 }, { 165.89, 27.241, 0.5045 }, { 166.76, 27.73, 0.51069 },
				{ 167.63, 28.224, 0.51692 }, { 168.5, 28.724, 0.52318 }, { 169.36, 29.229, 0.5295 },
				{ 170.22, 29.739, 0.53582 }, { 171.08, 30.255, 0.54214 },
				{ 171.93, 30.777, 0.54845 }, { 172.78, 31.303, 0.55477 },
				{ 173.63, 31.836, 0.56109 }, { 174.47, 32.373, 0.56741 },
				{ 175.31, 32.916, 0.57373 }, { 176.15, 33.464, 0.58004 },
				{ 176.98, 34.017, 0.58636 }, { 177.81, 34.576, 0.59268 }, { 178.63, 35.14, 0.599 },
				{ 179.46, 35.709, 0.60531 }, { 180.28, 36.283, 0.61163 },
				{ 181.09, 36.862, 0.61795 }, { 181.9, 37.447, 0.62427 },
				{ 182.71, 38.036, 0.63059 }, { 183.51, 38.631, 0.6369 },
				{ 184.31, 39.231, 0.64322 }, { 185.11, 39.836, 0.64954 },
				{ 185.9, 40.445, 0.65586 }, { 186.69, 41.06, 0.66218 }, { 187.48, 41.68, 0.66849 },
				{ 188.26, 42.305, 0.67481 }, { 189.03, 42.934, 0.68113 },
				{ 189.81, 43.569, 0.68745 }, { 190.58, 44.208, 0.69376 },
				{ 191.34, 44.853, 0.70008 }, { 192.1, 45.502, 0.7064 }, { 192.86, 46.156, 0.71272 },
				{ 193.61, 46.814, 0.71904 }, { 194.36, 47.478, 0.72535 },
				{ 195.1, 48.146, 0.73167 }, { 195.84, 48.819, 0.73799 },
				{ 196.58, 49.496, 0.74431 }, { 197.31, 50.178, 0.75062 },
				{ 198.04, 50.865, 0.75694 }, { 198.76, 51.556, 0.76326 },
				{ 199.48, 52.252, 0.76958 }, { 200.19, 52.952, 0.7759 }, { 200.9, 53.657, 0.78221 },
				{ 201.6, 54.367, 0.78853 }, { 202.3, 55.08, 0.79485 }, { 203, 55.798, 0.80117 }, {
						203.69, 56.521, 0.80748 }, { 204.38, 57.248, 0.8138 }, { 205.06, 57.979,
						0.82012 }, { 205.74, 58.715, 0.82644 }, { 206.41, 59.454, 0.83276 }, {
						207.08, 60.199, 0.83907 }, { 207.74, 60.947, 0.84539 }, { 208.4, 61.699,
						0.85171 }, { 209.06, 62.456, 0.85803 }, { 209.7, 63.216, 0.86434 }, {
						210.35, 63.981, 0.87066 }, { 210.99, 64.75, 0.87698 }, { 211.62, 65.523,
						0.8833 }, { 212.25, 66.3, 0.88962 }, { 212.88, 67.08, 0.89593 }, { 213.5,
						67.865, 0.90225 }, { 214.11, 68.654, 0.90857 }, { 214.72, 69.446, 0.91489 },
				{ 215.33, 70.243, 0.9212 }, { 215.93, 71.043, 0.92752 },
				{ 216.52, 71.847, 0.93384 }, { 217.11, 72.654, 0.94016 },
				{ 217.7, 73.466, 0.94648 }, { 218.28, 74.281, 0.95279 },
				{ 218.85, 75.099, 0.95911 }, { 219.42, 75.922, 0.96543 },
				{ 219.98, 76.748, 0.97175 }, { 220.54, 77.577, 0.97806 },
				{ 221.09, 78.41, 0.98438 }, { 221.64, 79.246, 0.9907 }, { 222.19, 80.086, 0.99702 },
				{ 222.72, 80.929, 1.0033 }, { 223.25, 81.776, 1.0097 }, { 223.78, 82.626, 1.016 }, {
						224.3, 83.479, 1.0223 }, { 224.82, 84.336, 1.0286 }, { 225.33, 85.196,
						1.0349 }, { 225.83, 86.059, 1.0412 }, { 226.33, 86.925, 1.0476 }, { 226.83,
						87.794, 1.0539 }, { 227.32, 88.667, 1.0601 }, { 227.8, 89.542, 1.0663 }, {
						228.28, 90.421, 1.0724 }, { 228.75, 91.302, 1.0786 }, { 229.22, 92.186,
						1.0846 }, { 229.68, 93.073, 1.0907 }, { 230.14, 93.963, 1.0967 }, { 230.59,
						94.855, 1.1026 }, { 231.03, 95.75, 1.1086 }, { 231.47, 96.648, 1.1145 }, {
						231.91, 97.548, 1.1203 }, { 232.34, 98.451, 1.1261 }, { 232.77, 99.356,
						1.1319 }, { 233.19, 100.26, 1.1376 }, { 233.6, 101.17, 1.1433 }, { 234.01,
						102.09, 1.149 }, { 234.41, 103, 1.1546 }, { 234.81, 103.92, 1.1602 }, {
						235.21, 104.84, 1.1658 }, { 235.6, 105.76, 1.1713 }, { 235.98, 106.68,
						1.1767 }, { 236.36, 107.61, 1.1822 }, { 236.73, 108.53, 1.1876 }, { 237.1,
						109.46, 1.1929 }, { 237.47, 110.39, 1.1983 }, { 237.82, 111.33, 1.2035 }, {
						238.18, 112.26, 1.2088 }, { 238.53, 113.2, 1.214 },
				{ 238.87, 114.14, 1.2192 }, { 239.21, 115.08, 1.2243 }, { 239.55, 116.02, 1.2294 },
				{ 239.88, 116.97, 1.2345 }, { 240.2, 117.91, 1.2395 }, { 240.52, 118.86, 1.2445 }, {
						240.84, 119.81, 1.2494 }, { 241.15, 120.76, 1.2543 }, { 241.46, 121.71,
						1.2592 }, { 241.76, 122.66, 1.264 }, { 242.06, 123.62, 1.2688 }, { 242.35,
						124.57, 1.2736 }, { 242.64, 125.53, 1.2783 }, { 242.92, 126.49, 1.283 }, {
						243.2, 127.45, 1.2876 }, { 243.48, 128.41, 1.2922 }, { 243.75, 129.37,
						1.2968 }, { 244.01, 130.34, 1.3013 }, { 244.27, 131.3, 1.3058 }, { 244.53,
						132.27, 1.3102 }, { 244.78, 133.24, 1.3147 }, { 245.03, 134.21, 1.319 }, {
						245.28, 135.18, 1.3234 }, { 245.52, 136.15, 1.3277 }, { 245.76, 137.12,
						1.3319 }, { 245.99, 138.09, 1.3362 }, { 246.22, 139.06, 1.3404 }, { 246.44,
						140.04, 1.3445 }, { 246.66, 141.01, 1.3486 }, { 246.88, 141.99, 1.3527 }, {
						247.09, 142.97, 1.3567 }, { 247.3, 143.95, 1.3607 },
				{ 247.5, 144.92, 1.3647 }, { 247.7, 145.9, 1.3686 }, { 247.9, 146.88, 1.3725 }, {
						248.09, 147.87, 1.3764 }, { 248.28, 148.85, 1.3802 }, { 248.47, 149.83,
						1.384 }, { 248.65, 150.81, 1.3877 }, { 248.83, 151.8, 1.3914 }, { 249.01,
						152.78, 1.3951 }, { 249.18, 153.77, 1.3987 }, { 249.34, 154.75, 1.4023 }, {
						249.51, 155.74, 1.4058 }, { 249.67, 156.73, 1.4093 }, { 249.83, 157.71,
						1.4128 }, { 249.98, 158.7, 1.4162 }, { 250.13, 159.69, 1.4196 }, { 250.28,
						160.68, 1.423 }, { 250.42, 161.67, 1.4263 }, { 250.56, 162.66, 1.4296 }, {
						250.7, 163.65, 1.4328 }, { 250.84, 164.64, 1.436 },
				{ 250.97, 165.63, 1.4392 }, { 251.09, 166.62, 1.4424 }, { 251.22, 167.62, 1.4454 },
				{ 251.34, 168.61, 1.4485 }, { 251.46, 169.6, 1.4515 }, { 251.58, 170.59, 1.4545 }, {
						251.69, 171.59, 1.4574 }, { 251.8, 172.58, 1.4604 }, { 251.91, 173.58,
						1.4632 }, { 252.01, 174.57, 1.4661 }, { 252.11, 175.57, 1.4688 }, { 252.21,
						176.56, 1.4716 }, { 252.31, 177.56, 1.4743 }, { 252.4, 178.55, 1.477 }, {
						252.49, 179.55, 1.4796 }, { 252.58, 180.54, 1.4822 }, { 252.67, 181.54,
						1.4848 }, { 252.75, 182.54, 1.4873 }, { 252.83, 183.53, 1.4898 }, { 252.91,
						184.53, 1.4923 }, { 252.99, 185.53, 1.4947 }, { 253.06, 186.52, 1.4971 }, {
						253.13, 187.52, 1.4994 }, { 253.2, 188.52, 1.5017 },
				{ 253.27, 189.52, 1.504 }, { 253.33, 190.51, 1.5062 }, { 253.39, 191.51, 1.5084 }, {
						253.45, 192.51, 1.5106 }, { 253.51, 193.51, 1.5127 }, { 253.57, 194.51,
						1.5147 }, { 253.62, 195.51, 1.5168 }, { 253.67, 196.51, 1.5188 }, { 253.72,
						197.5, 1.5207 }, { 253.77, 198.5, 1.5227 }, { 253.82, 199.5, 1.5246 }, {
						253.86, 200.5, 1.5264 }, { 253.91, 201.5, 1.5282 }, { 253.95, 202.5, 1.53 },
				{ 253.99, 203.5, 1.5317 }, { 254.02, 204.5, 1.5334 }, { 254.06, 205.5, 1.5351 }, {
						254.09, 206.5, 1.5367 }, { 254.13, 207.5, 1.5383 },
				{ 254.16, 208.5, 1.5398 }, { 254.19, 209.49, 1.5414 }, { 254.21, 210.49, 1.5428 }, {
						254.24, 211.49, 1.5443 }, { 254.27, 212.49, 1.5457 }, { 254.29, 213.49,
						1.547 }, { 254.31, 214.49, 1.5483 }, { 254.33, 215.49, 1.5496 }, { 254.35,
						216.49, 1.5509 }, { 254.37, 217.49, 1.5521 }, { 254.39, 218.49, 1.5532 }, {
						254.41, 219.49, 1.5544 }, { 254.42, 220.49, 1.5555 }, { 254.43, 221.49,
						1.5565 }, { 254.45, 222.49, 1.5575 }, { 254.46, 223.49, 1.5585 }, { 254.47,
						224.49, 1.5595 }, { 254.48, 225.49, 1.5604 }, { 254.49, 226.49, 1.5612 }, {
						254.5, 227.49, 1.5621 }, { 254.51, 228.49, 1.5629 }, { 254.52, 229.49,
						1.5636 }, { 254.52, 230.49, 1.5643 }, { 254.53, 231.49, 1.565 }, { 254.53,
						232.49, 1.5657 }, { 254.54, 233.49, 1.5663 }, { 254.54, 234.49, 1.5668 }, {
						254.54, 235.49, 1.5674 }, { 254.55, 236.49, 1.5679 }, { 254.55, 237.49,
						1.5683 }, { 254.55, 238.49, 1.5687 }, { 254.55, 239.49, 1.5691 }, { 254.56,
						240.49, 1.5694 }, { 254.56, 241.49, 1.5697 }, { 254.56, 242.49, 1.57 }, {
						254.56, 243.49, 1.5702 }, { 254.56, 244.49, 1.5704 }, { 254.56, 245.49,
						1.5706 }, { 254.56, 246.49, 1.5707 }, { 254.56, 247.49, 1.5708 }, { 254.56,
						248.49, 1.5708 }, { 254.56, 249.49, 1.5708 }, { 254.56, 249.49, 1.5708 }, {
						254.56, 250.49, 1.5708 }, { 254.56, 251.49, 1.5708 }, { 254.56, 252.49,
						1.5708 }, { 254.56, 253.49, 1.5708 }, { 254.5584, 254.5584, 1.5708 }, };
		if (index < 0) {
			return Position(0, 0 + interval * index, 0);
		} else if (index > getSize() - 1) {
			Position end(data[getSize() - 1][0], data[getSize() - 1][1], data[getSize() - 1][2]);
			return end
					+ Position((index - getSize() + 1) * interval * cos(end.theta),
							(index - getSize() + 1) * interval * sin(end.theta), 0);
		} else {
			return Position(data[index][0], data[index][1], data[index][2]);
		}
	}
};

class Curve45: public Trajectory {
public:
	Curve45(bool mirror = false) :
			Trajectory(mirror) {
	}
private:
	virtual int size() const {
		return 300;
	}
	virtual Position position(int index) const {
		static const float data[][3] = { { 0, 0, 0 }, { 1, 0, 0 }, { 2, 0, 0 }, { 3, 0, 0 }, { 4, 0,
				0 }, { 5, 0, 0 }, { 6, 0, 0 }, { 7, 0, 0 }, { 8, 0, 0 }, { 9, 0, 0 }, { 10, 0, 0 },
				{ 11, 0, 0 }, { 12, 0, 0 }, { 13, 0, 0 }, { 14, 0, 0 }, { 15, 0, 0 }, { 16, 0, 0 },
				{ 17, 0, 0 }, { 18, 0, 0 }, { 19, 0, 0 }, { 20, 0, 0 }, { 21, 0, 0 }, { 22, 0, 0 },
				{ 23, 0, 0 }, { 24, 0, 0 }, { 25, 0, 0 }, { 26, 0, 0 }, { 27, 0, 0 }, { 28, 0, 0 },
				{ 29, 0, 0 }, { 30, 0, 0 }, { 31, 0, 0 }, { 32, 0, 0 }, { 33, 0, 0 }, { 34, 0, 0 },
				{ 35, 0, 0 }, { 36, 0, 0 }, { 37, 0, 0 }, { 38, 0, 0 }, { 39, 0, 0 }, { 40, 0, 0 },
				{ 41, 0, 0 }, { 42, 0, 0 }, { 43, 0, 0 }, { 44, 0, 0 }, { 45, 0, 0 }, { 46, 0, 0 },
				{ 47, 0, 0 }, { 48, 0, 0 }, { 49, 0, 0 }, { 50, 0, 0 }, { 51, 0, 0 }, { 52, 0, 0 },
				{ 53, 0, 0 }, { 54, 0, 0 }, { 55, 0, 0 }, { 56, 0, 0 }, { 57, 0, 0 }, { 58, 0, 0 },
				{ 59, 0, 0 }, { 60, 0, 0 }, { 61, 0, 0 }, { 62, 0, 0 }, { 63, 0, 0 }, { 64, 0, 0 },
				{ 65, 0, 0 }, { 66, 0, 0 }, { 67, 0, 0 }, { 68, 0, 0 }, { 69, 0, 0 }, { 70, 0, 0 },
				{ 71, 0, 0 }, { 72, 0, 0 }, { 73, 0, 0 }, { 74, 0, 0 }, { 75, 0, 0 }, { 76, 0, 0 },
				{ 77, 0, 0 }, { 78, 0, 0 }, { 79, 0, 0 }, { 80.69, 0, 0 }, { 81.69, 0, 0 }, { 82.69,
						0, 0 }, { 83.69, 9.6963e-05, 9.6963e-05 },
				{ 84.69, 0.00038785, 0.00029089 }, { 85.69, 0.00096963, 0.00058178 }, { 86.69,
						0.0019393, 0.00096963 }, { 87.69, 0.0033937, 0.0014544 }, { 88.69,
						0.0054299, 0.0020362 }, { 89.69, 0.0081449, 0.002715 }, { 90.69, 0.011636,
						0.0034907 }, { 91.69, 0.015999, 0.0043633 }, { 92.69, 0.021332, 0.005333 },
				{ 93.69, 0.027731, 0.0063995 }, { 94.69, 0.035294, 0.0075631 }, { 95.69, 0.044118,
						0.0088236 }, { 96.69, 0.054299, 0.010181 }, { 97.69, 0.065934, 0.011636 }, {
						98.69, 0.07912, 0.013187 }, { 99.69, 0.093955, 0.014835 }, { 100.69,
						0.11054, 0.016581 }, { 101.69, 0.12896, 0.018423 }, { 102.69, 0.14932,
						0.020362 }, { 103.69, 0.17171, 0.022398 }, { 104.69, 0.19624, 0.024532 }, {
						105.69, 0.223, 0.026762 }, { 106.69, 0.25209, 0.029089 }, { 107.69, 0.28359,
						0.031513 }, { 108.69, 0.31762, 0.034034 }, { 109.69, 0.35427, 0.036652 }, {
						110.69, 0.39362, 0.039367 }, { 111.68, 0.43579, 0.042179 }, { 112.68,
						0.48086, 0.045088 }, { 113.68, 0.52894, 0.048094 }, { 114.68, 0.58011,
						0.051196 }, { 115.68, 0.63448, 0.054396 }, { 116.68, 0.69214, 0.057693 }, {
						117.68, 0.75319, 0.061087 }, { 118.67, 0.81772, 0.064577 }, { 119.67,
						0.88583, 0.068165 }, { 120.67, 0.95762, 0.071849 }, { 121.67, 1.0332,
						0.075631 }, { 122.66, 1.1126, 0.079509 }, { 123.66, 1.196, 0.083485 }, {
						124.66, 1.2834, 0.087557 }, { 125.65, 1.375, 0.091727 }, { 126.65, 1.4709,
						0.095993 }, { 127.64, 1.5711, 0.10036 }, { 128.64, 1.6757, 0.10482 }, {
						129.63, 1.7849, 0.10937 }, { 130.62, 1.8986, 0.11403 }, { 131.62, 2.0171,
						0.11878 }, { 132.61, 2.1404, 0.12363 }, { 133.6, 2.2687, 0.12857 }, {
						134.59, 2.4019, 0.13361 }, { 135.58, 2.5402, 0.13875 }, { 136.57, 2.6837,
						0.14399 }, { 137.56, 2.8325, 0.14932 }, { 138.55, 2.9866, 0.15475 }, {
						139.54, 3.1462, 0.16028 }, { 140.52, 3.3113, 0.1659 }, { 141.51, 3.4821,
						0.17162 }, { 142.49, 3.6586, 0.17744 }, { 143.48, 3.841, 0.18336 }, {
						144.46, 4.0292, 0.18937 }, { 145.44, 4.2234, 0.19548 }, { 146.42, 4.4237,
						0.20168 }, { 147.4, 4.6303, 0.20805 }, { 148.37, 4.8431, 0.21441 }, {
						149.35, 5.062, 0.22078 }, { 150.32, 5.2872, 0.22714 }, { 151.3, 5.5186,
						0.23351 }, { 152.27, 5.7562, 0.23987 }, { 153.24, 6, 0.24623 }, { 154.21,
						6.2499, 0.2526 }, { 155.17, 6.506, 0.25896 }, { 156.14, 6.7682, 0.26533 }, {
						157.1, 7.0366, 0.27169 }, { 158.06, 7.311, 0.27806 }, { 159.02, 7.5916,
						0.28442 }, { 159.98, 7.8783, 0.29079 }, { 160.94, 8.1711, 0.29715 }, {
						161.89, 8.47, 0.30352 }, { 162.84, 8.775, 0.30988 }, { 163.79, 9.086,
						0.31624 }, { 164.74, 9.403, 0.32261 }, { 165.69, 9.7261, 0.32897 }, {
						166.63, 10.055, 0.33534 }, { 167.57, 10.39, 0.3417 }, { 168.51, 10.731,
						0.34807 }, { 169.45, 11.078, 0.35443 }, { 170.39, 11.431, 0.3608 }, {
						171.32, 11.79, 0.36716 }, { 172.25, 12.155, 0.37353 }, { 173.18, 12.526,
						0.37989 }, { 174.11, 12.903, 0.38626 }, { 175.03, 13.285, 0.39262 }, {
						175.95, 13.674, 0.39898 }, { 176.87, 14.068, 0.40535 }, { 177.79, 14.468,
						0.41171 }, { 178.7, 14.874, 0.41808 }, { 179.61, 15.286, 0.42444 }, {
						180.52, 15.704, 0.43081 }, { 181.43, 16.127, 0.43717 }, { 182.33, 16.556,
						0.44354 }, { 183.23, 16.991, 0.4499 }, { 184.13, 17.432, 0.45627 }, {
						185.02, 17.878, 0.46263 }, { 185.92, 18.33, 0.46899 }, { 186.81, 18.788,
						0.47536 }, { 187.69, 19.251, 0.48172 }, { 188.58, 19.72, 0.48809 }, {
						189.46, 20.195, 0.49445 }, { 190.33, 20.675, 0.50082 }, { 191.21, 21.16,
						0.50718 }, { 192.08, 21.652, 0.51355 }, { 192.95, 22.149, 0.51991 }, {
						193.81, 22.651, 0.52628 }, { 194.67, 23.159, 0.53264 }, { 195.53, 23.672,
						0.539 }, { 196.38, 24.191, 0.54537 }, { 197.24, 24.715, 0.55173 }, { 198.08,
						25.244, 0.5581 }, { 198.93, 25.779, 0.56446 }, { 199.77, 26.32, 0.57083 }, {
						200.61, 26.865, 0.57719 }, { 201.44, 27.416, 0.58356 }, { 202.27, 27.973,
						0.58992 }, { 203.1, 28.534, 0.59603 }, { 203.93, 29.1, 0.60204 }, { 204.75,
						29.672, 0.60796 }, { 205.56, 30.248, 0.61377 }, { 206.38, 30.828, 0.61949 },
				{ 207.19, 31.413, 0.62512 }, { 208, 32.003, 0.63065 }, { 208.8, 32.597, 0.63608 }, {
						209.6, 33.195, 0.64141 }, { 210.4, 33.798, 0.64664 }, { 211.2, 34.404,
						0.65178 }, { 211.99, 35.015, 0.65683 }, { 212.78, 35.63, 0.66177 }, {
						213.56, 36.248, 0.66662 }, { 214.35, 36.87, 0.67137 }, { 215.13, 37.496,
						0.67602 }, { 215.9, 38.125, 0.68058 }, { 216.68, 38.758, 0.68504 }, {
						217.45, 39.394, 0.68941 }, { 218.22, 40.033, 0.69367 }, { 218.98, 40.676,
						0.69784 }, { 219.75, 41.321, 0.70191 }, { 220.51, 41.97, 0.70589 }, {
						221.27, 42.622, 0.70977 }, { 222.02, 43.276, 0.71355 }, { 222.78, 43.934,
						0.71723 }, { 223.53, 44.594, 0.72082 }, { 224.28, 45.256, 0.72431 }, {
						225.02, 45.921, 0.72771 }, { 225.77, 46.589, 0.731 }, { 226.51, 47.259,
						0.7342 }, { 227.25, 47.931, 0.7373 }, { 227.99, 48.606, 0.74031 }, { 228.73,
						49.282, 0.74322 }, { 229.46, 49.961, 0.74603 }, { 230.19, 50.642, 0.74875 },
				{ 230.92, 51.324, 0.75136 }, { 231.65, 52.009, 0.75389 },
				{ 232.38, 52.695, 0.75631 }, { 233.11, 53.383, 0.75864 },
				{ 233.83, 54.073, 0.76087 }, { 234.55, 54.764, 0.763 }, { 235.27, 55.456, 0.76504 },
				{ 235.99, 56.15, 0.76698 }, { 236.71, 56.846, 0.76882 },
				{ 237.43, 57.542, 0.77056 }, { 238.15, 58.24, 0.77221 },
				{ 238.86, 58.939, 0.77376 }, { 239.58, 59.639, 0.77522 },
				{ 240.29, 60.339, 0.77657 }, { 241, 61.041, 0.77784 }, { 241.71, 61.744, 0.779 }, {
						242.42, 62.447, 0.78007 }, { 243.13, 63.151, 0.78103 }, { 243.84, 63.856,
						0.78191 }, { 244.55, 64.561, 0.78268 }, { 245.26, 65.266, 0.78336 }, {
						245.97, 65.973, 0.78394 }, { 246.68, 66.679, 0.78443 }, { 247.39, 67.386,
						0.78482 }, { 248.09, 68.093, 0.78511 }, { 248.8, 68.8, 0.7853 }, { 249.51,
						69.507, 0.7854 }, { 250.21, 70.214, 0.7854 }, { 250.21, 70.214, 0.7854 }, {
						250.92, 70.921, 0.7854 }, { 251.63, 71.628, 0.7854 }, { 252.34, 72.335,
						0.7854 }, { 253.04, 73.042, 0.7854 }, { 253.75, 73.749, 0.7854 }, { 254.46,
						74.456, 0.7854 }, { 255.16, 75.164, 0.7854 }, { 255.87, 75.871, 0.7854 }, {
						256.58, 76.578, 0.7854 }, { 257.28, 77.285, 0.7854 }, { 257.99, 77.992,
						0.7854 }, { 258.7, 78.699, 0.7854 }, { 259.41, 79.406, 0.7854 }, { 260.11,
						80.113, 0.7854 }, { 260.82, 80.82, 0.7854 }, { 261.53, 81.528, 0.7854 }, {
						262.23, 82.235, 0.7854 }, { 262.94, 82.942, 0.7854 }, { 263.65, 83.649,
						0.7854 }, { 264.36, 84.356, 0.7854 }, { 265.06, 85.063, 0.7854 }, { 265.77,
						85.77, 0.7854 }, { 266.48, 86.477, 0.7854 }, { 267.18, 87.184, 0.7854 }, {
						267.89, 87.892, 0.7854 }, { 268.6, 88.599, 0.7854 }, { 270, 90, 0.7854 }, };
		if (index < 0) {
			return Position(0, 0 + interval * index, 0);
		} else if (index > getSize() - 1) {
			Position end(data[getSize() - 1][0], data[getSize() - 1][1], data[getSize() - 1][2]);
			return end
					+ Position((index - getSize() + 1) * interval * cos(end.theta),
							(index - getSize() + 1) * interval * sin(end.theta), 0);
		} else {
			return Position(data[index][0], data[index][1], data[index][2]);
		}
	}
};

class Curve45R: public Trajectory {
public:
	Curve45R(bool mirror = false) :
			Trajectory(mirror) {
	}
private:
	virtual int size() const {
		return 300;
	}
	virtual Position position(int index) const {
		static const float data[][3] =
				{ { 0, 0, 0 }, { 1, 0, 0 }, { 2, 0, 0 }, { 3, 0, 0 }, { 4, 0, 0 }, { 5, 0, 0 }, { 6,
						0, 0 }, { 7, 0, 0 }, { 8, 0, 0 }, { 9, 0, 0 }, { 10, 0, 0 }, { 11, 0, 0 }, {
						12, 0, 0 }, { 13, 0, 0 }, { 14, 0, 0 }, { 15, 0, 0 }, { 16, 0, 0 }, { 17, 0,
						0 }, { 18, 0, 0 }, { 19, 0, 0 }, { 20, 0, 0 }, { 21, 0, 0 }, { 22, 0, 0 }, {
						23, 0, 0 }, { 24, 0, 0 }, { 25, 0, 0 }, { 26, 0, 0 }, { 27.969, 0, 0 }, {
						28.969, 0, 0 }, { 29.969, 0, 0 }, { 30.969, 9.6963e-05, 9.6963e-05 }, {
						31.969, 0.00038785, 0.00029089 }, { 32.969, 0.00096963, 0.00058178 }, {
						33.969, 0.0019393, 0.00096963 }, { 34.969, 0.0033937, 0.0014544 }, { 35.969,
						0.0054299, 0.0020362 }, { 36.969, 0.0081449, 0.002715 }, { 37.969, 0.011636,
						0.0034907 }, { 38.969, 0.015999, 0.0043633 },
						{ 39.969, 0.021332, 0.005333 }, { 40.969, 0.027731, 0.0063995 }, { 41.969,
								0.035294, 0.0075631 }, { 42.969, 0.044118, 0.0088236 }, { 43.969,
								0.054299, 0.010181 }, { 44.969, 0.065934, 0.011636 }, { 45.969,
								0.07912, 0.013187 }, { 46.969, 0.093955, 0.014835 }, { 47.969,
								0.11054, 0.016581 }, { 48.969, 0.12896, 0.018423 }, { 49.968,
								0.14932, 0.020362 }, { 50.968, 0.17171, 0.022398 }, { 51.968,
								0.19624, 0.024532 }, { 52.967, 0.223, 0.026762 }, { 53.967, 0.25209,
								0.029089 }, { 54.966, 0.28359, 0.031513 }, { 55.966, 0.31762,
								0.034034 }, { 56.965, 0.35427, 0.036652 }, { 57.964, 0.39362,
								0.039367 }, { 58.964, 0.43579, 0.042179 }, { 59.963, 0.48086,
								0.045088 }, { 60.961, 0.52894, 0.048094 }, { 61.96, 0.58011,
								0.051196 }, { 62.959, 0.63448, 0.054396 }, { 63.957, 0.69214,
								0.057693 }, { 64.955, 0.75319, 0.061087 }, { 65.953, 0.81772,
								0.064577 }, { 66.951, 0.88583, 0.068165 }, { 67.948, 0.95762,
								0.071849 }, { 68.945, 1.0332, 0.075631 },
						{ 69.942, 1.1126, 0.079509 }, { 70.939, 1.196, 0.083485 }, { 71.935, 1.2834,
								0.087557 }, { 72.931, 1.375, 0.091727 },
						{ 73.926, 1.4709, 0.095993 }, { 74.921, 1.5711, 0.10036 }, { 75.915, 1.6757,
								0.10482 }, { 76.909, 1.7849, 0.10937 }, { 77.903, 1.8986, 0.11403 },
						{ 78.896, 2.0171, 0.11878 }, { 79.888, 2.1404, 0.12363 }, { 80.88, 2.2687,
								0.12857 }, { 81.871, 2.4019, 0.13361 }, { 82.862, 2.5402, 0.13875 },
						{ 83.851, 2.6837, 0.14399 }, { 84.84, 2.8325, 0.14932 }, { 85.828, 2.9866,
								0.15475 }, { 86.815, 3.1462, 0.16028 }, { 87.802, 3.3113, 0.1659 },
						{ 88.787, 3.4821, 0.17162 }, { 89.771, 3.6586, 0.17744 }, { 90.754, 3.841,
								0.18336 }, { 91.736, 4.0292, 0.18937 }, { 92.717, 4.2234, 0.19548 },
						{ 93.697, 4.4237, 0.20168 }, { 94.676, 4.6303, 0.20805 }, { 95.653, 4.8431,
								0.21441 }, { 96.628, 5.062, 0.22078 }, { 97.603, 5.2872, 0.22714 },
						{ 98.576, 5.5186, 0.23351 }, { 99.547, 5.7562, 0.23987 }, { 100.52, 6,
								0.24623 }, { 101.49, 6.2499, 0.2526 }, { 102.45, 6.506, 0.25896 }, {
								103.42, 6.7682, 0.26533 }, { 104.38, 7.0366, 0.27169 }, { 105.34,
								7.311, 0.27806 }, { 106.3, 7.5916, 0.28442 }, { 107.26, 7.8783,
								0.29079 }, { 108.22, 8.1711, 0.29715 }, { 109.17, 8.47, 0.30352 }, {
								110.12, 8.775, 0.30988 }, { 111.07, 9.086, 0.31624 }, { 112.02,
								9.403, 0.32261 }, { 112.97, 9.7261, 0.32897 }, { 113.91, 10.055,
								0.33534 }, { 114.85, 10.39, 0.3417 }, { 115.79, 10.731, 0.34807 }, {
								116.73, 11.078, 0.35443 }, { 117.67, 11.431, 0.3608 }, { 118.6,
								11.79, 0.36716 }, { 119.53, 12.155, 0.37353 }, { 120.46, 12.526,
								0.37989 }, { 121.39, 12.903, 0.38626 }, { 122.31, 13.285, 0.39262 },
						{ 123.23, 13.674, 0.39898 }, { 124.15, 14.068, 0.40535 }, { 125.07, 14.468,
								0.41171 }, { 125.98, 14.874, 0.41808 }, { 126.89, 15.286, 0.42444 },
						{ 127.8, 15.704, 0.43081 }, { 128.71, 16.127, 0.43717 }, { 129.61, 16.556,
								0.44354 }, { 130.51, 16.991, 0.4499 }, { 131.41, 17.432, 0.45627 },
						{ 132.3, 17.878, 0.46263 }, { 133.2, 18.33, 0.46899 }, { 134.08, 18.788,
								0.47536 }, { 134.97, 19.251, 0.48172 }, { 135.85, 19.72, 0.48809 },
						{ 136.73, 20.195, 0.49445 }, { 137.61, 20.675, 0.50082 }, { 138.49, 21.16,
								0.50718 }, { 139.36, 21.652, 0.51355 }, { 140.22, 22.149, 0.51991 },
						{ 141.09, 22.651, 0.52628 }, { 141.95, 23.159, 0.53264 }, { 142.81, 23.672,
								0.539 }, { 143.66, 24.191, 0.54537 }, { 144.52, 24.715, 0.55173 }, {
								145.36, 25.244, 0.5581 }, { 146.21, 25.779, 0.56446 }, { 147.05,
								26.32, 0.57083 }, { 147.89, 26.865, 0.57719 }, { 148.72, 27.416,
								0.58356 }, { 149.55, 27.973, 0.58992 }, { 150.38, 28.534, 0.59603 },
						{ 151.21, 29.1, 0.60204 }, { 152.03, 29.672, 0.60796 }, { 152.84, 30.248,
								0.61377 }, { 153.66, 30.828, 0.61949 }, { 154.47, 31.413, 0.62512 },
						{ 155.28, 32.003, 0.63065 }, { 156.08, 32.597, 0.63608 }, { 156.88, 33.195,
								0.64141 }, { 157.68, 33.798, 0.64664 }, { 158.48, 34.404, 0.65178 },
						{ 159.27, 35.015, 0.65683 }, { 160.06, 35.63, 0.66177 }, { 160.84, 36.248,
								0.66662 }, { 161.63, 36.87, 0.67137 }, { 162.41, 37.496, 0.67602 },
						{ 163.18, 38.125, 0.68058 }, { 163.96, 38.758, 0.68504 }, { 164.73, 39.394,
								0.68941 }, { 165.5, 40.033, 0.69367 }, { 166.26, 40.676, 0.69784 },
						{ 167.03, 41.321, 0.70191 }, { 167.79, 41.97, 0.70589 }, { 168.55, 42.622,
								0.70977 }, { 169.3, 43.276, 0.71355 }, { 170.06, 43.934, 0.71723 },
						{ 170.81, 44.594, 0.72082 }, { 171.56, 45.256, 0.72431 }, { 172.3, 45.921,
								0.72771 }, { 173.05, 46.589, 0.731 }, { 173.79, 47.259, 0.7342 }, {
								174.53, 47.931, 0.7373 }, { 175.27, 48.606, 0.74031 }, { 176,
								49.282, 0.74322 }, { 176.74, 49.961, 0.74603 }, { 177.47, 50.642,
								0.74875 }, { 178.2, 51.324, 0.75136 }, { 178.93, 52.009, 0.75389 },
						{ 179.66, 52.695, 0.75631 }, { 180.38, 53.383, 0.75864 }, { 181.11, 54.073,
								0.76087 }, { 181.83, 54.764, 0.763 }, { 182.55, 55.456, 0.76504 }, {
								183.27, 56.15, 0.76698 }, { 183.99, 56.846, 0.76882 }, { 184.71,
								57.542, 0.77056 }, { 185.43, 58.24, 0.77221 }, { 186.14, 58.939,
								0.77376 }, { 186.86, 59.639, 0.77522 }, { 187.57, 60.339, 0.77657 },
						{ 188.28, 61.041, 0.77784 }, { 188.99, 61.744, 0.779 }, { 189.7, 62.447,
								0.78007 }, { 190.41, 63.151, 0.78103 }, { 191.12, 63.856, 0.78191 },
						{ 191.83, 64.561, 0.78268 }, { 192.54, 65.266, 0.78336 }, { 193.25, 65.973,
								0.78394 }, { 193.96, 66.679, 0.78443 }, { 194.66, 67.386, 0.78482 },
						{ 195.37, 68.093, 0.78511 }, { 196.08, 68.8, 0.7853 }, { 196.79, 69.507,
								0.7854 }, { 197.49, 70.214, 0.7854 }, { 197.49, 70.214, 0.7854 }, {
								198.2, 70.921, 0.7854 }, { 198.91, 71.628, 0.7854 }, { 199.61,
								72.335, 0.7854 }, { 200.32, 73.042, 0.7854 }, { 201.03, 73.749,
								0.7854 }, { 201.74, 74.456, 0.7854 }, { 202.44, 75.164, 0.7854 }, {
								203.15, 75.871, 0.7854 }, { 203.86, 76.578, 0.7854 }, { 204.56,
								77.285, 0.7854 }, { 205.27, 77.992, 0.7854 }, { 205.98, 78.699,
								0.7854 }, { 206.69, 79.406, 0.7854 }, { 207.39, 80.113, 0.7854 }, {
								208.1, 80.82, 0.7854 }, { 208.81, 81.528, 0.7854 }, { 209.51,
								82.235, 0.7854 }, { 210.22, 82.942, 0.7854 }, { 210.93, 83.649,
								0.7854 }, { 211.64, 84.356, 0.7854 }, { 212.34, 85.063, 0.7854 }, {
								213.05, 85.77, 0.7854 }, { 213.76, 86.477, 0.7854 }, { 214.46,
								87.184, 0.7854 }, { 215.17, 87.892, 0.7854 }, { 215.88, 88.599,
								0.7854 }, { 216.58, 89.306, 0.7854 }, { 217.29, 90.013, 0.7854 }, {
								218, 90.72, 0.7854 }, { 218.71, 91.427, 0.7854 }, { 219.41, 92.134,
								0.7854 }, { 220.12, 92.841, 0.7854 }, { 220.83, 93.548, 0.7854 }, {
								221.53, 94.255, 0.7854 }, { 222.24, 94.963, 0.7854 }, { 222.95,
								95.67, 0.7854 }, { 223.66, 96.377, 0.7854 }, { 224.36, 97.084,
								0.7854 }, { 225.07, 97.791, 0.7854 }, { 225.78, 98.498, 0.7854 }, {
								226.48, 99.205, 0.7854 }, { 227.19, 99.912, 0.7854 }, { 227.9,
								100.62, 0.7854 }, { 228.61, 101.33, 0.7854 }, { 229.31, 102.03,
								0.7854 }, { 230.02, 102.74, 0.7854 }, { 230.73, 103.45, 0.7854 }, {
								231.43, 104.15, 0.7854 }, { 232.14, 104.86, 0.7854 }, { 232.85,
								105.57, 0.7854 }, { 233.56, 106.28, 0.7854 }, { 234.26, 106.98,
								0.7854 }, { 234.97, 107.69, 0.7854 }, { 235.68, 108.4, 0.7854 }, {
								236.38, 109.1, 0.7854 }, { 237.09, 109.81, 0.7854 }, { 237.8,
								110.52, 0.7854 }, { 238.51, 111.23, 0.7854 }, { 239.21, 111.93,
								0.7854 }, { 239.92, 112.64, 0.7854 }, { 240.63, 113.35, 0.7854 }, {
								241.33, 114.05, 0.7854 }, { 242.04, 114.76, 0.7854 }, { 242.75,
								115.47, 0.7854 }, { 243.46, 116.18, 0.7854 }, { 244.16, 116.88,
								0.7854 }, { 244.87, 117.59, 0.7854 }, { 245.58, 118.3, 0.7854 }, {
								246.28, 119, 0.7854 }, { 246.99, 119.71, 0.7854 }, { 247.7, 120.42,
								0.7854 }, { 248.4, 121.13, 0.7854 }, { 249.11, 121.83, 0.7854 }, {
								249.82, 122.54, 0.7854 }, { 250.53, 123.25, 0.7854 }, { 251.23,
								123.95, 0.7854 }, { 251.94, 124.66, 0.7854 }, { 252.65, 125.37,
								0.7854 }, { 253.35, 126.08, 0.7854 }, { 254.5584, 127.2792, 0.7854 }, };
		if (index < 0) {
			return Position(0, 0 + interval * index, 0);
		} else if (index > getSize() - 1) {
			Position end(data[getSize() - 1][0], data[getSize() - 1][1], data[getSize() - 1][2]);
			return end
					+ Position((index - getSize() + 1) * interval * cos(end.theta),
							(index - getSize() + 1) * interval * sin(end.theta), 0);
		} else {
			return Position(data[index][0], data[index][1], data[index][2]);
		}
	}
};

class Curve135: public Trajectory {
public:
	Curve135(bool mirror = false) :
			Trajectory(mirror) {
	}
private:
	virtual int size() const {
		return 284;
	}
	virtual Position position(int index) const {
		static const float data[][3] = { { 0, 0, 0 }, { 1.5056, 0, 0 }, { 2.5056, 0, 0 }, { 3.5056,
				0, 0 }, { 4.5056, 0.0002404, 0.0002404 }, { 5.5056, 0.00096161, 0.00072121 }, {
				6.5056, 0.002404, 0.0014424 }, { 7.5056, 0.0048081, 0.002404 }, { 8.5056, 0.0084141,
				0.0036061 }, { 9.5055, 0.013463, 0.0050485 }, { 10.506, 0.020194, 0.0067313 }, {
				11.505, 0.028848, 0.0086545 }, { 12.505, 0.039666, 0.010818 }, { 13.505, 0.052888,
				0.013222 }, { 14.505, 0.068754, 0.015867 }, { 15.505, 0.087504, 0.018751 }, {
				16.505, 0.10938, 0.021877 }, { 17.504, 0.13462, 0.025242 }, { 18.504, 0.16346,
				0.028848 }, { 19.504, 0.19615, 0.032695 }, { 20.503, 0.23293, 0.036782 }, { 21.502,
				0.27402, 0.041109 }, { 22.501, 0.31968, 0.045677 }, { 23.5, 0.37015, 0.050485 }, {
				24.498, 0.42565, 0.055533 }, { 25.496, 0.48644, 0.060822 }, { 26.494, 0.55274,
				0.066351 }, { 27.492, 0.6248, 0.072121 }, { 28.488, 0.70285, 0.078131 }, { 29.485,
				0.78713, 0.084382 }, { 30.481, 0.87788, 0.090873 }, { 31.476, 0.97533, 0.097604 }, {
				32.471, 1.0797, 0.10458 }, { 33.464, 1.1913, 0.11179 }, { 34.457, 1.3102, 0.11924 },
				{ 35.449, 1.4368, 0.12693 }, { 36.44, 1.5713, 0.13487 }, { 37.43, 1.7138, 0.14304 },
				{ 38.418, 1.8647, 0.15145 }, { 39.406, 2.0241, 0.16011 }, { 40.391, 2.1923, 0.169 },
				{ 41.376, 2.3695, 0.17814 }, { 42.358, 2.5559, 0.18751 },
				{ 43.339, 2.7518, 0.19713 }, { 44.317, 2.9573, 0.20699 },
				{ 45.294, 3.1727, 0.21708 }, { 46.268, 3.3982, 0.22742 }, { 47.24, 3.6339, 0.238 },
				{ 48.209, 3.8802, 0.24882 }, { 49.176, 4.1371, 0.25988 },
				{ 50.139, 4.405, 0.27118 }, { 51.099, 4.684, 0.28271 }, { 52.056, 4.9742, 0.29449 },
				{ 53.01, 5.276, 0.30651 }, { 53.959, 5.5894, 0.31878 }, { 54.905, 5.9146, 0.33128 },
				{ 55.846, 6.2519, 0.34402 }, { 56.783, 6.6014, 0.357 }, { 57.715, 6.9632, 0.37022 },
				{ 58.643, 7.3375, 0.38368 }, { 59.565, 7.7245, 0.39739 },
				{ 60.481, 8.1244, 0.41133 }, { 61.392, 8.5371, 0.42551 },
				{ 62.297, 8.963, 0.43994 }, { 63.195, 9.4021, 0.4546 }, { 64.087, 9.8546, 0.46951 },
				{ 64.972, 10.32, 0.48465 }, { 65.85, 10.8, 0.50004 }, { 66.72, 11.293, 0.51567 }, {
						67.582, 11.8, 0.53153 }, { 68.435, 12.321, 0.54764 }, { 69.281, 12.855,
						0.56399 }, { 70.117, 13.404, 0.58057 }, { 70.944, 13.966, 0.5974 }, {
						71.761, 14.543, 0.61447 }, { 72.568, 15.133, 0.63178 }, { 73.364, 15.738,
						0.64933 }, { 74.15, 16.357, 0.66712 }, { 74.924, 16.989, 0.68515 }, {
						75.687, 17.636, 0.70342 }, { 76.437, 18.297, 0.72193 }, { 77.175, 18.972,
						0.74068 }, { 77.9, 19.661, 0.7597 }, { 78.612, 20.363, 0.77871 }, { 79.31,
						21.079, 0.79772 }, { 79.995, 21.808, 0.81673 }, { 80.666, 22.549, 0.83574 },
				{ 81.322, 23.304, 0.85476 }, { 81.964, 24.071, 0.87377 },
				{ 82.591, 24.849, 0.89278 }, { 83.204, 25.64, 0.91179 },
				{ 83.801, 26.442, 0.93081 }, { 84.383, 27.255, 0.94982 },
				{ 84.949, 28.08, 0.96883 }, { 85.499, 28.914, 0.98784 }, { 86.034, 29.76, 1.0069 },
				{ 86.552, 30.615, 1.0259 }, { 87.054, 31.48, 1.0449 }, { 87.54, 32.354, 1.0639 }, {
						88.008, 33.237, 1.0829 }, { 88.46, 34.129, 1.1019 },
				{ 88.895, 35.03, 1.1209 }, { 89.313, 35.938, 1.1399 }, { 89.713, 36.855, 1.159 }, {
						90.096, 37.779, 1.178 }, { 90.461, 38.71, 1.197 },
				{ 90.808, 39.647, 1.216 }, { 91.138, 40.591, 1.235 }, { 91.449, 41.542, 1.254 }, {
						91.743, 42.498, 1.273 }, { 92.018, 43.459, 1.292 },
				{ 92.275, 44.426, 1.3111 }, { 92.513, 45.397, 1.3301 }, { 92.733, 46.372, 1.3491 },
				{ 92.935, 47.352, 1.3681 }, { 93.117, 48.335, 1.3871 }, { 93.281, 49.321, 1.4061 },
				{ 93.426, 50.311, 1.4251 }, { 93.553, 51.303, 1.4441 }, { 93.66, 52.297, 1.4632 }, {
						93.749, 53.293, 1.4822 }, { 93.818, 54.291, 1.5012 }, { 93.869, 55.289,
						1.5202 }, { 93.9, 56.289, 1.5392 }, { 93.913, 57.289, 1.5582 }, { 93.906,
						58.289, 1.5772 }, { 93.881, 59.288, 1.5962 }, { 93.837, 60.287, 1.6153 }, {
						93.773, 61.285, 1.6343 }, { 93.691, 62.282, 1.6528 }, { 93.591, 63.277,
						1.671 }, { 93.473, 64.27, 1.6891 }, { 93.338, 65.261, 1.7069 }, { 93.184,
						66.249, 1.7244 }, { 93.014, 67.234, 1.7417 }, { 92.828, 68.217, 1.7588 }, {
						92.624, 69.196, 1.7756 }, { 92.405, 70.172, 1.7922 }, { 92.169, 71.143,
						1.8086 }, { 91.918, 72.111, 1.8247 }, { 91.651, 73.075, 1.8405 }, { 91.37,
						74.035, 1.8562 }, { 91.074, 74.99, 1.8715 }, { 90.763, 75.94, 1.8867 }, {
						90.438, 76.886, 1.9016 }, { 90.1, 77.827, 1.9163 },
				{ 89.747, 78.763, 1.9307 }, { 89.382, 79.694, 1.9449 }, { 89.004, 80.62, 1.9588 }, {
						88.613, 81.54, 1.9725 }, { 88.209, 82.455, 1.986 },
				{ 87.794, 83.365, 1.9992 }, { 87.367, 84.269, 2.0122 }, { 86.928, 85.167, 2.0249 },
				{ 86.478, 86.061, 2.0374 }, { 86.017, 86.948, 2.0497 }, { 85.546, 87.83, 2.0617 }, {
						85.064, 88.706, 2.0735 }, { 84.572, 89.577, 2.085 }, { 84.071, 90.442,
						2.0963 }, { 83.559, 91.301, 2.1074 }, { 83.039, 92.155, 2.1182 }, { 82.509,
						93.004, 2.1288 }, { 81.971, 93.846, 2.1391 }, { 81.425, 94.684, 2.1492 }, {
						80.87, 95.516, 2.1591 }, { 80.307, 96.342, 2.1687 }, { 79.736, 97.163,
						2.1781 }, { 79.158, 97.979, 2.1872 }, { 78.573, 98.79, 2.1961 }, { 77.98,
						99.596, 2.2047 }, { 77.381, 100.4, 2.2132 }, { 76.776, 101.19, 2.2213 }, {
						76.164, 101.98, 2.2293 }, { 75.546, 102.77, 2.237 }, { 74.922, 103.55,
						2.2444 }, { 74.293, 104.33, 2.2516 }, { 73.658, 105.1, 2.2586 }, { 73.018,
						105.87, 2.2653 }, { 72.373, 106.63, 2.2718 }, { 71.723, 107.39, 2.2781 }, {
						71.069, 108.15, 2.2841 }, { 70.41, 108.9, 2.2898 },
				{ 69.747, 109.65, 2.2954 }, { 69.08, 110.4, 2.3007 }, { 68.41, 111.14, 2.3057 }, {
						67.736, 111.88, 2.3105 }, { 67.058, 112.61, 2.3151 }, { 66.378, 113.34,
						2.3194 }, { 65.694, 114.07, 2.3235 }, { 65.008, 114.8, 2.3273 }, { 64.319,
						115.53, 2.331 }, { 63.627, 116.25, 2.3343 }, { 62.933, 116.97, 2.3374 }, {
						62.238, 117.69, 2.3403 }, { 61.54, 118.4, 2.343 },
				{ 60.841, 119.12, 2.3454 }, { 60.14, 119.83, 2.3475 }, { 59.437, 120.54, 2.3495 }, {
						58.734, 121.25, 2.3511 }, { 58.029, 121.96, 2.3526 }, { 57.324, 122.67,
						2.3538 }, { 56.618, 123.38, 2.3548 }, { 55.911, 124.09, 2.3555 }, { 55.204,
						124.8, 2.356 }, { 54.497, 125.5, 2.3562 }, { 53.79, 126.21, 2.3562 }, {
						53.79, 126.21, 2.3562 }, { 53.083, 126.92, 2.3562 }, { 52.376, 127.62,
						2.3562 }, { 51.669, 128.33, 2.3562 }, { 50.961, 129.04, 2.3562 }, { 50.254,
						129.75, 2.3562 }, { 49.547, 130.45, 2.3562 }, { 48.84, 131.16, 2.3562 }, {
						48.133, 131.87, 2.3562 }, { 47.426, 132.57, 2.3562 }, { 46.719, 133.28,
						2.3562 }, { 46.012, 133.99, 2.3562 }, { 45.305, 134.7, 2.3562 }, { 44.598,
						135.4, 2.3562 }, { 43.89, 136.11, 2.3562 }, { 43.183, 136.82, 2.3562 }, {
						42.476, 137.52, 2.3562 }, { 41.769, 138.23, 2.3562 }, { 41.062, 138.94,
						2.3562 }, { 40.355, 139.65, 2.3562 }, { 39.648, 140.35, 2.3562 }, { 38.941,
						141.06, 2.3562 }, { 38.234, 141.77, 2.3562 }, { 37.526, 142.47, 2.3562 }, {
						36.819, 143.18, 2.3562 }, { 36.112, 143.89, 2.3562 }, { 35.405, 144.59,
						2.3562 }, { 34.698, 145.3, 2.3562 }, { 33.991, 146.01, 2.3562 }, { 33.284,
						146.72, 2.3562 }, { 32.577, 147.42, 2.3562 }, { 31.87, 148.13, 2.3562 }, {
						31.163, 148.84, 2.3562 }, { 30.455, 149.54, 2.3562 }, { 29.748, 150.25,
						2.3562 }, { 29.041, 150.96, 2.3562 }, { 28.334, 151.67, 2.3562 }, { 27.627,
						152.37, 2.3562 }, { 26.92, 153.08, 2.3562 }, { 26.213, 153.79, 2.3562 }, {
						25.506, 154.49, 2.3562 }, { 24.799, 155.2, 2.3562 }, { 24.091, 155.91,
						2.3562 }, { 23.384, 156.62, 2.3562 }, { 22.677, 157.32, 2.3562 }, { 21.97,
						158.03, 2.3562 }, { 21.263, 158.74, 2.3562 }, { 20.556, 159.44, 2.3562 }, {
						19.849, 160.15, 2.3562 }, { 19.142, 160.86, 2.3562 }, { 18.435, 161.57,
						2.3562 }, { 17.727, 162.27, 2.3562 }, { 17.02, 162.98, 2.3562 }, { 16.313,
						163.69, 2.3562 }, { 15.606, 164.39, 2.3562 }, { 14.899, 165.1, 2.3562 }, {
						14.192, 165.81, 2.3562 }, { 13.485, 166.52, 2.3562 }, { 12.778, 167.22,
						2.3562 }, { 12.071, 167.93, 2.3562 }, { 11.364, 168.64, 2.3562 }, { 10.656,
						169.34, 2.3562 }, { 9.9493, 170.05, 2.3562 }, { 9.2422, 170.76, 2.3562 }, {
						8.5351, 171.46, 2.3562 }, { 7.828, 172.17, 2.3562 }, { 7.1209, 172.88,
						2.3562 }, { 6.4138, 173.59, 2.3562 }, { 5.7067, 174.29, 2.3562 }, { 4.9995,
						175, 2.3562 }, { 4.2924, 175.71, 2.3562 }, { 3.5853, 176.41, 2.3562 }, {
						2.8782, 177.12, 2.3562 }, { 2.1711, 177.83, 2.3562 }, { 1.464, 178.54,
						2.3562 }, { 0.75691, 179.24, 2.3562 }, { 0, 180, 2.3562 }, };
		if (index < 0) {
			return Position(0, 0 + interval * index, 0);
		} else if (index > getSize() - 1) {
			Position end(data[getSize() - 1][0], data[getSize() - 1][1], data[getSize() - 1][2]);
			return end
					+ Position((index - getSize() + 1) * interval * cos(end.theta),
							(index - getSize() + 1) * interval * sin(end.theta), 0);
		} else {
			return Position(data[index][0], data[index][1], data[index][2]);
		}
	}
};

class Curve135R: public Trajectory {
public:
	Curve135R(bool mirror = false) :
			Trajectory(mirror) {
	}
private:
	virtual int size() const {
		return 284;
	}
	virtual Position position(int index) const {
		static const float data[][3] = { { 0, 0, 0 }, { 1, 0, 0 }, { 2, 0, 0 }, { 3, 0, 0 }, { 4, 0,
				0 }, { 5, 0, 0 }, { 6, 0, 0 }, { 7, 0, 0 }, { 8, 0, 0 }, { 9, 0, 0 }, { 10, 0, 0 },
				{ 11, 0, 0 }, { 12, 0, 0 }, { 13, 0, 0 }, { 14, 0, 0 }, { 15, 0, 0 }, { 16, 0, 0 },
				{ 17, 0, 0 }, { 18, 0, 0 }, { 19, 0, 0 }, { 20, 0, 0 }, { 21, 0, 0 }, { 22, 0, 0 },
				{ 23, 0, 0 }, { 24, 0, 0 }, { 25, 0, 0 }, { 26, 0, 0 }, { 27, 0, 0 }, { 28, 0, 0 },
				{ 29, 0, 0 }, { 30, 0, 0 }, { 31, 0, 0 }, { 32, 0, 0 }, { 33, 0, 0 }, { 34, 0, 0 },
				{ 35, 0, 0 }, { 36, 0, 0 }, { 37, 0, 0 }, { 38, 0, 0 }, { 39, 0, 0 }, { 40, 0, 0 },
				{ 41, 0, 0 }, { 42, 0, 0 }, { 43, 0, 0 }, { 44, 0, 0 }, { 45, 0, 0 }, { 46, 0, 0 },
				{ 47, 0, 0 }, { 48, 0, 0 }, { 49, 0, 0 }, { 50, 0, 0 }, { 51, 0, 0 }, { 52, 0, 0 },
				{ 53, 0, 0 }, { 54, 0, 0 }, { 55, 0, 0 }, { 56, 0, 0 }, { 57, 0, 0 }, { 58, 0, 0 },
				{ 59, 0, 0 }, { 60, 0, 0 }, { 61, 0, 0 }, { 62, 0, 0 }, { 63, 0, 0 }, { 64, 0, 0 },
				{ 65, 0, 0 }, { 66, 0, 0 }, { 67, 0, 0 }, { 68, 0, 0 }, { 69, 0, 0 }, { 70, 0, 0 },
				{ 71, 0, 0 }, { 72, 0, 0 }, { 73, 0, 0 }, { 74, 0, 0 }, { 75, 0, 0 },
				{ 76.064, 0, 0 }, { 77.064, 0, 0 }, { 78.064, 0, 0 },
				{ 79.064, 0.0002404, 0.0002404 }, { 80.064, 0.00096161, 0.00072121 }, { 81.064,
						0.002404, 0.0014424 }, { 82.064, 0.0048081, 0.002404 }, { 83.064, 0.0084141,
						0.0036061 }, { 84.064, 0.013463, 0.0050485 },
				{ 85.064, 0.020194, 0.0067313 }, { 86.064, 0.028848, 0.0086545 }, { 87.064,
						0.039666, 0.010818 }, { 88.064, 0.052888, 0.013222 }, { 89.064, 0.068754,
						0.015867 }, { 90.063, 0.087504, 0.018751 }, { 91.063, 0.10938, 0.021877 }, {
						92.063, 0.13462, 0.025242 }, { 93.063, 0.16346, 0.028848 }, { 94.062,
						0.19615, 0.032695 }, { 95.061, 0.23293, 0.036782 }, { 96.06, 0.27402,
						0.041109 }, { 97.059, 0.31968, 0.045677 }, { 98.058, 0.37015, 0.050485 }, {
						99.057, 0.42565, 0.055533 }, { 100.05, 0.48644, 0.060822 }, { 101.05,
						0.55274, 0.066351 }, { 102.05, 0.6248, 0.072121 }, { 103.05, 0.70285,
						0.078131 }, { 104.04, 0.78713, 0.084382 }, { 105.04, 0.87788, 0.090873 }, {
						106.03, 0.97533, 0.097604 }, { 107.03, 1.0797, 0.10458 }, { 108.02, 1.1913,
						0.11179 }, { 109.02, 1.3102, 0.11924 }, { 110.01, 1.4368, 0.12693 }, { 111,
						1.5713, 0.13487 }, { 111.99, 1.7138, 0.14304 }, { 112.98, 1.8647, 0.15145 },
				{ 113.96, 2.0241, 0.16011 }, { 114.95, 2.1923, 0.169 }, { 115.93, 2.3695, 0.17814 },
				{ 116.92, 2.5559, 0.18751 }, { 117.9, 2.7518, 0.19713 },
				{ 118.88, 2.9573, 0.20699 }, { 119.85, 3.1727, 0.21708 },
				{ 120.83, 3.3982, 0.22742 }, { 121.8, 3.6339, 0.238 }, { 122.77, 3.8802, 0.24882 },
				{ 123.73, 4.1371, 0.25988 }, { 124.7, 4.405, 0.27118 }, { 125.66, 4.684, 0.28271 },
				{ 126.61, 4.9742, 0.29449 }, { 127.57, 5.276, 0.30651 },
				{ 128.52, 5.5894, 0.31878 }, { 129.46, 5.9146, 0.33128 },
				{ 130.4, 6.2519, 0.34402 }, { 131.34, 6.6014, 0.357 }, { 132.27, 6.9632, 0.37022 },
				{ 133.2, 7.3375, 0.38368 }, { 134.12, 7.7245, 0.39739 },
				{ 135.04, 8.1244, 0.41133 }, { 135.95, 8.5371, 0.42551 },
				{ 136.86, 8.963, 0.43994 }, { 137.75, 9.4021, 0.4546 }, { 138.65, 9.8546, 0.46951 },
				{ 139.53, 10.32, 0.48465 }, { 140.41, 10.8, 0.50004 }, { 141.28, 11.293, 0.51567 },
				{ 142.14, 11.8, 0.53153 }, { 142.99, 12.321, 0.54764 }, { 143.84, 12.855, 0.56399 },
				{ 144.68, 13.404, 0.58057 }, { 145.5, 13.966, 0.5974 }, { 146.32, 14.543, 0.61447 },
				{ 147.13, 15.133, 0.63178 }, { 147.92, 15.738, 0.64933 },
				{ 148.71, 16.357, 0.66712 }, { 149.48, 16.989, 0.68515 },
				{ 150.25, 17.636, 0.70342 }, { 151, 18.297, 0.72193 }, { 151.73, 18.972, 0.74068 },
				{ 152.46, 19.661, 0.7597 }, { 153.17, 20.363, 0.77871 },
				{ 153.87, 21.079, 0.79772 }, { 154.55, 21.808, 0.81673 },
				{ 155.22, 22.549, 0.83574 }, { 155.88, 23.304, 0.85476 },
				{ 156.52, 24.071, 0.87377 }, { 157.15, 24.849, 0.89278 },
				{ 157.76, 25.64, 0.91179 }, { 158.36, 26.442, 0.93081 },
				{ 158.94, 27.255, 0.94982 }, { 159.51, 28.08, 0.96883 },
				{ 160.06, 28.914, 0.98784 }, { 160.59, 29.76, 1.0069 }, { 161.11, 30.615, 1.0259 },
				{ 161.61, 31.48, 1.0449 }, { 162.1, 32.354, 1.0639 }, { 162.57, 33.237, 1.0829 }, {
						163.02, 34.129, 1.1019 }, { 163.45, 35.03, 1.1209 }, { 163.87, 35.938,
						1.1399 }, { 164.27, 36.855, 1.159 }, { 164.65, 37.779, 1.178 }, { 165.02,
						38.71, 1.197 }, { 165.37, 39.647, 1.216 }, { 165.7, 40.591, 1.235 }, {
						166.01, 41.542, 1.254 }, { 166.3, 42.498, 1.273 },
				{ 166.58, 43.459, 1.292 }, { 166.83, 44.426, 1.3111 }, { 167.07, 45.397, 1.3301 }, {
						167.29, 46.372, 1.3491 }, { 167.49, 47.352, 1.3681 }, { 167.68, 48.335,
						1.3871 }, { 167.84, 49.321, 1.4061 }, { 167.98, 50.311, 1.4251 }, { 168.11,
						51.303, 1.4441 }, { 168.22, 52.297, 1.4632 }, { 168.31, 53.293, 1.4822 }, {
						168.38, 54.291, 1.5012 }, { 168.43, 55.289, 1.5202 }, { 168.46, 56.289,
						1.5392 }, { 168.47, 57.289, 1.5582 }, { 168.46, 58.289, 1.5772 }, { 168.44,
						59.288, 1.5962 }, { 168.39, 60.287, 1.6153 }, { 168.33, 61.285, 1.6343 }, {
						168.25, 62.282, 1.6528 }, { 168.15, 63.277, 1.671 },
				{ 168.03, 64.27, 1.6891 }, { 167.9, 65.261, 1.7069 }, { 167.74, 66.249, 1.7244 }, {
						167.57, 67.234, 1.7417 }, { 167.39, 68.217, 1.7588 }, { 167.18, 69.196,
						1.7756 }, { 166.96, 70.172, 1.7922 }, { 166.73, 71.143, 1.8086 }, { 166.48,
						72.111, 1.8247 }, { 166.21, 73.075, 1.8405 }, { 165.93, 74.035, 1.8562 }, {
						165.63, 74.99, 1.8715 }, { 165.32, 75.94, 1.8867 }, { 165, 76.886, 1.9016 },
				{ 164.66, 77.827, 1.9163 }, { 164.31, 78.763, 1.9307 }, { 163.94, 79.694, 1.9449 },
				{ 163.56, 80.62, 1.9588 }, { 163.17, 81.54, 1.9725 }, { 162.77, 82.455, 1.986 }, {
						162.35, 83.365, 1.9992 }, { 161.93, 84.269, 2.0122 }, { 161.49, 85.167,
						2.0249 }, { 161.04, 86.061, 2.0374 }, { 160.58, 86.948, 2.0497 }, { 160.1,
						87.83, 2.0617 }, { 159.62, 88.706, 2.0735 }, { 159.13, 89.577, 2.085 }, {
						158.63, 90.442, 2.0963 }, { 158.12, 91.301, 2.1074 }, { 157.6, 92.155,
						2.1182 }, { 157.07, 93.004, 2.1288 }, { 156.53, 93.846, 2.1391 }, { 155.98,
						94.684, 2.1492 }, { 155.43, 95.516, 2.1591 }, { 154.87, 96.342, 2.1687 }, {
						154.29, 97.163, 2.1781 }, { 153.72, 97.979, 2.1872 }, { 153.13, 98.79,
						2.1961 }, { 152.54, 99.596, 2.2047 }, { 151.94, 100.4, 2.2132 }, { 151.33,
						101.19, 2.2213 }, { 150.72, 101.98, 2.2293 }, { 150.1, 102.77, 2.237 }, {
						149.48, 103.55, 2.2444 }, { 148.85, 104.33, 2.2516 }, { 148.22, 105.1,
						2.2586 }, { 147.58, 105.87, 2.2653 }, { 146.93, 106.63, 2.2718 }, { 146.28,
						107.39, 2.2781 }, { 145.63, 108.15, 2.2841 }, { 144.97, 108.9, 2.2898 }, {
						144.31, 109.65, 2.2954 }, { 143.64, 110.4, 2.3007 }, { 142.97, 111.14,
						2.3057 }, { 142.29, 111.88, 2.3105 }, { 141.62, 112.61, 2.3151 }, { 140.94,
						113.34, 2.3194 }, { 140.25, 114.07, 2.3235 }, { 139.57, 114.8, 2.3273 }, {
						138.88, 115.53, 2.331 }, { 138.19, 116.25, 2.3343 }, { 137.49, 116.97,
						2.3374 }, { 136.8, 117.69, 2.3403 }, { 136.1, 118.4, 2.343 }, { 135.4,
						119.12, 2.3454 }, { 134.7, 119.83, 2.3475 }, { 134, 120.54, 2.3495 }, {
						133.29, 121.25, 2.3511 }, { 132.59, 121.96, 2.3526 }, { 131.88, 122.67,
						2.3538 }, { 131.18, 123.38, 2.3548 }, { 130.47, 124.09, 2.3555 }, { 129.76,
						124.8, 2.356 }, { 129.06, 125.5, 2.3562 }, { 128.35, 126.21, 2.3562 }, {
						128.35, 126.21, 2.3562 }, { 127.2792, 127.2792, 2.3562 }, };
		if (index < 0) {
			return Position(0, 0 + interval * index, 0);
		} else if (index > getSize() - 1) {
			Position end(data[getSize() - 1][0], data[getSize() - 1][1], data[getSize() - 1][2]);
			return end
					+ Position((index - getSize() + 1) * interval * cos(end.theta),
							(index - getSize() + 1) * interval * sin(end.theta), 0);
		} else {
			return Position(data[index][0], data[index][1], data[index][2]);
		}
	}
};

class MoveAction {
public:
	MoveAction(Buzzer *bz, Motor *mt, Encoders *enc, MPU6500 *mpu, Reflector *rfl, WallDetector *wd,
			SpeedController *sc) :
			bz(bz), mt(mt), enc(enc), mpu(mpu), rfl(rfl), wd(wd), sc(sc),
					thread(PRIORITY_MOVE_ACTION, STACK_SIZE_MOVE_ACTION) {
		_actions = 0;
		set_params(600);
		ticker.attach_us(this, &MoveAction::isr, MOVE_ACTION_PERIOD);
	}
	enum ACTION {
		START_STEP,
		START_INIT,
		GO_STRAIGHT,
		TURN_LEFT_90,
		TURN_RIGHT_90,
		RETURN,
		STOP,

		FAST_START_STEP,
		FAST_GO_STRAIGHT,
		FAST_GO_DIAGONAL,

		FAST_TURN_LEFT_45,
		FAST_TURN_RIGHT_45,
		FAST_TURN_LEFT_45R,
		FAST_TURN_RIGHT_45R,

		FAST_TURN_LEFT_4545,
		FAST_TURN_RIGHT_4545,

		FAST_TURN_LEFT_45S45,
		FAST_TURN_RIGHT_45S45,

		FAST_TURN_LEFT_90,
		FAST_TURN_RIGHT_90,

		FAST_TURN_LEFT_135,
		FAST_TURN_LEFT_135R,
		FAST_TURN_RIGHT_135,
		FAST_TURN_RIGHT_135R,
		FAST_STOP,
	};
	struct Operation {
		enum ACTION action;
		int num;
	};
	const char* action_string(enum ACTION action) {
		static const char name[][32] = { "start_step", "start_init", "go_straight", "turn_left_90",
				"turn_right_90", "return", "stop", "fast_start_step", "fast_go_straight",
				"fast_go_diagonal", "fast_turn_left_45", "fast_turn_left_45_reverse",
				"fast_turn_right_45", "fast_turn_right_45_reverse", "fast_turn_left_4545",
				"fast_turn_right_4545", "fast_turn_left_45_s_45", "fast_turn_right_45_s_45",
				"fast_turn_left_90", "fast_turn_right_90", "fast_turn_left_135",
				"fast_turn_left_135_reverse", "fast_turn_right_135", "fast_turn_right_135_reverse",
				"fast_stop" };
		return name[action];
	}
	void enable() {
		rfl->enable();
		sc->enable();
		thread.start(this, &MoveAction::task);
		DBG("0x%08X: Move Action\n", (unsigned int ) thread.gettid());
	}
	void disable() {
		thread.terminate();
		sc->disable();
		rfl->disable();
		while (1) {
			osEvent evt = mail.get(1);
			if (evt.status != osEventMail) {
				break;
			}
		}
		_actions = 0;
	}
	void set_action(enum ACTION action, int num = 1) {
		_actions += num;
		struct Operation *operation = mail.alloc();
		operation->action = action;
		operation->num = num;
		mail.put(operation);
	}
	void set_params(float fast_speed) {
		this->fast_speed = fast_speed;
	}
	void set_params_relative(float add) {
		this->fast_speed += add;
	}
	int actions() const {
		return _actions;
	}
	void printPosition(const char* name) {
		DBG("%s\t", name);
//		DBG("Ori:(%06.1f, %06.1f, %06.3f)\t", origin.x, origin.y, origin.theta);
//		DBG("Abs:(%06.1f, %06.1f, %06.3f)\t", sc->getPosition().x, sc->getPosition().y,
//				sc->getPosition().theta);
		DBG("Rel:(%06.1f, %06.1f, %06.3f)\t", getRelativePosition().x, getRelativePosition().y,
				getRelativePosition().theta);
		DBG("\n");
	}
	Position getRelativePosition() {
		return (sc->getPosition() - origin).rotate(-origin.theta);
	}
	void updateOrigin(Position passed) {
		origin += passed.rotate(origin.theta);
	}
	void setPosition(Position pos = Position(90, 6 + 24, M_PI / 2)) {
		origin = pos;
		sc->getPosition() = pos;
	}
	void fixPosition(Position pos) {
		sc->getPosition() -= pos;
	}
private:
	Buzzer *bz;
	Motor *mt;
	Encoders *enc;
	MPU6500 *mpu;
	Reflector *rfl;
	WallDetector *wd;
	SpeedController *sc;
	Thread thread;
	Ticker ticker;
	Mail<struct Operation, 128> mail;
	Timer timer;
	int _actions;
	float fast_speed;
	Position origin;

	void isr() {
		thread.signal_set(0x01);
	}
	void wall_avoid() {
#if WALL_AVOID_ENABLED
		void wall_attach() {
			if (wd->wall().side[0]) {
				sc->position.y -= wd->wall_difference().side[0] * 0.00001 * sc->actual().trans;
			}
			if (wd->wall().side[1]) {
				sc->position.y += wd->wall_difference().side[1] * 0.00001 * sc->actual().trans;
			}
		}
#endif
	}
	void wall_attach() {
#if WALL_ATTACH_ENABLED
		if (wd->wall().flont[0] && wd->wall().flont[1]) {
			while (1) {
				float trans = wd->wall_difference().flont[0] + wd->wall_difference().flont[1];
				float rot = wd->wall_difference().flont[1] - wd->wall_difference().flont[0];
				sc->set_target(trans * 100, rot * 10);
				if (fabs(trans) < 0.1f && fabs(rot) < 0.1f) break;
				Thread::wait(1);
			}
			sc->set_target(0, 0);
			fixPosition(Position(getRelativePosition().x, 0, 0).rotate(origin.theta));
		}
#endif
	}
	void turn(float target_angle, float speed) {
		const float accel = 64 * M_PI;
		timer.reset();
		timer.start();
		while (1) {
			Thread::signal_wait(0x01);
			if (fabs(sc->actual.rot) > speed) break;
			if (target_angle > 0) {
				sc->set_target(0, timer.read() * accel);
			} else {
				sc->set_target(0, -timer.read() * accel);
			}
		}
		while (1) {
			Thread::signal_wait(0x01);
			if (fabs(sc->actual.rot) < 0.2) break;
			float extra = target_angle - getRelativePosition().theta;
			float target_speed = sqrt(2 * accel * fabs(extra));
			target_speed = (target_speed > speed) ? speed : target_speed;
			if (extra > 0) {
				sc->set_target(0, target_speed);
			} else {
				sc->set_target(0, -target_speed);
			}
		}
		updateOrigin(Position(0, 0, target_angle));
	}
	void straight_x(const float distance, const float v0, const float v1, const float v2) {
		const float accel = 6000;
		const float decel = 3000;
		Trajectory st;
		timer.reset();
		timer.start();
		int cnt = 0;
		float integral = 0;
		bool isAccel = true;
		while (1) {
			if (getRelativePosition().x > distance * 0.98) break;
			if (v2 < 1.0f && sc->actual.trans < 1.0f) break;
			Thread::signal_wait(0x01);
			float extra = distance - getRelativePosition().x;
			float velocity = sqrt(2 * decel * fabs(extra) + v2 * v2);
			if (extra < 0) velocity = -velocity;
			if (velocity < sc->actual.trans) isAccel = false;
			if (isAccel && sc->actual.trans < v1) {
				velocity = v0 + timer.read() * accel;
			}
			if (velocity > v1) velocity = v1;
			Position dir = st.getNextDir(getRelativePosition(), velocity);
			integral += dir.theta * TRAJECTORY_INTEGRAL_GAIN * MOVE_ACTION_PERIOD / 1000000;
			sc->set_target(dir.x, (dir.theta + integral) * TRAJECTORY_PROP_GAIN);
			if (cnt % 10 == 0) {
//				dir.print("Dir");
			}
			cnt++;
			wall_avoid();
		}
		sc->set_target(v2, 0);
		printPosition("Straight");
		updateOrigin(Position(distance, 0, 0));
	}
	template<class C> void trace(C tr, const float velocity) {
		int cnt = 0;
		float integral = 0;
		while (1) {
			if (tr.getPortion() > 0.98) break;
			Thread::signal_wait(0x01);
			Position dir = tr.getNextDir(getRelativePosition(), velocity);
			integral += dir.theta * TRAJECTORY_INTEGRAL_GAIN * MOVE_ACTION_PERIOD / 1000000;
			sc->set_target(dir.x, (dir.theta + integral) * TRAJECTORY_PROP_GAIN);
			if (cnt % 10 == 0) {
//				DBG("%.3f\t%.3f\t%.4f\n", dir.x, dir.y, dir.theta);
			}
			cnt++;
		}
		sc->set_target(velocity, 0);
		updateOrigin(tr.getEndPosition());
	}
	void task() {
		while (1) {
			osEvent evt = mail.get();
			if (evt.status != osEventMail) {
				DBG("Mail Error!\n");
				continue;
			}
			struct Operation *operation = (struct Operation*) evt.value.p;
			enum ACTION action = operation->action;
			int num = operation->num;
			DBG("Action:\t%s\tNumber:\t%d\n", action_string(operation->action), operation->num);
//			printPosition("Start");
			const float velocity = 600;
			const float omega = 4.0f * M_PI;
			for (int i = 0; i < num; i++) {
				switch (action) {
					case START_STEP:
						setPosition();
						straight_x(180 - 24 - 6, 0, velocity, velocity);
						break;
					case START_INIT:
						straight_x(90, velocity, velocity, 0);
						if (mpu->angle.z > 0) {
							wall_attach();
							turn(-M_PI / 2, omega);
							wall_attach();
							turn(-M_PI / 2, omega);
						} else {
							wall_attach();
							turn(M_PI / 2, omega);
							wall_attach();
							turn(M_PI / 2, omega);
						}
						for (int i = 0; i < 100; i++) {
							sc->set_target(-i, 0);
							Thread::wait(1);
						}
						Thread::wait(200);
						sc->disable();
						mt->drive(-60, -60);
						Thread::wait(400);
						mt->drive(0, 0);
						break;
					case GO_STRAIGHT:
						straight_x(180, velocity, velocity, velocity);
						break;
					case TURN_LEFT_90: {
						Curve90 tr(false);
						trace(tr, velocity);
					}
						break;
					case TURN_RIGHT_90: {
						Curve90 tr(true);
						trace(tr, velocity);
					}
						break;
					case RETURN:
						straight_x(90, velocity, velocity, 0);
						if (mpu->angle.z > 0) {
							wall_attach();
							turn(-M_PI / 2, omega);
							wall_attach();
							turn(-M_PI / 2, omega);
						} else {
							wall_attach();
							turn(M_PI / 2, omega);
							wall_attach();
							turn(M_PI / 2, omega);
						}
						straight_x(90, 0, velocity, velocity);
						break;
					case STOP:
						straight_x(90, velocity, velocity, 0);
						wall_attach();
						sc->set_target(0, 0);
						break;
					case FAST_START_STEP:
						setPosition();
						straight_x(180 - 24 - 6, 0, velocity, velocity);
						break;
					case FAST_GO_STRAIGHT:
						straight_x(180 * num, velocity, 2400, velocity);
						i += num - 1;
						break;
					case FAST_GO_DIAGONAL:
						straight_x(90 * 1.41421356 * num, velocity, velocity, velocity);
						i += num - 1;
						break;
					case FAST_TURN_LEFT_45: {
						Curve45 tr(false);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_RIGHT_45: {
						Curve45 tr(true);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_LEFT_45R: {
						Curve45R tr(false);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_RIGHT_45R: {
						Curve45R tr(true);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_LEFT_4545: {
						Curve4545 tr(false);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_RIGHT_4545: {
						Curve4545 tr(true);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_LEFT_45S45: {
						Curve45S45 tr(false);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_RIGHT_45S45: {
						Curve45S45 tr(true);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_LEFT_90: {
						Curve90 tr(false);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_RIGHT_90: {
						Curve90 tr(true);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_LEFT_135: {
						Curve135 tr(false);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_RIGHT_135: {
						Curve135 tr(true);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_LEFT_135R: {
						Curve135R tr(false);
						trace(tr, velocity);
					}
						break;
					case FAST_TURN_RIGHT_135R: {
						Curve135R tr(true);
						trace(tr, velocity);
					}
						break;
					case FAST_STOP:
						straight_x(90, velocity, velocity, 0);
						wall_attach();
						sc->set_target(0, 0);
						break;
				}
			}
			_actions -= operation->num;
			mail.free(operation);
//			printPosition("End");
		}
	}
};

#endif /* MOVEACTION_H_ */
