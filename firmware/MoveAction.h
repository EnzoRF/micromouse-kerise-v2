/*
 * MoveAction.h
 *
 *  Created on: 2016/11/11
 *      Author: kerikun11
 */

#ifndef MOVEACTION_H_
#define MOVEACTION_H_

#include "mbed.h"
#include "config.h"
#include <vector>
#include <queue>
#include <string>

#define WALL_ATTACH_ENABLED			false
#define WALL_AVOID_ENABLED			false

#if HALF_SIZE
#define LOOK_AHEAD_UNIT				3
#define TRAJECTORY_PROP_GAIN		80
#define TRAJECTORY_INT_GAIN			0
#define WALL_AVOID_GAIN				0.0001f
#else
#define LOOK_AHEAD_UNIT				6
#define TRAJECTORY_PROP_GAIN		40
#define TRAJECTORY_INT_GAIN			0
#endif

class Trajectory {
public:
	Trajectory() {
		reset();
	}
	virtual ~Trajectory() {
	}
	void reset() {
		last_index = 0;
	}
	Position getNextDir(const Position &cur, float velocity) {
		int index_cur = getNextIndex(cur);
		int look_ahead = LOOK_AHEAD_UNIT * (1.0f + pow(velocity / 600, 2));
		Position dir = (getPosition(index_cur + look_ahead) - cur).rotate(-cur.theta);
		dir.theta = atan2f(dir.y, dir.x);
		return dir;
	}
	float getRemain() const {
		return (getSize() - last_index) * interval;
	}
	Position getEndPosition() {
		return getPosition(getSize());
	}
protected:
	int last_index;
	const float interval = 2.0f;
	virtual int size() const {
		return 180;
	}
	virtual Position position(int index) const {
		return Position(index * interval, 0, 0);
	}
	virtual void cache(int index) {
	}
	int getSize() const {
		return size();
	}
	Position getPosition(const int index) {
		return position(index);
	}
	int getNextIndex(const Position& pos) {
		for (int i = last_index;; i++) {
			Position target = getPosition(i);
			Position dir = (target - pos).rotate(-target.theta);
			if (dir.x > 0) {
				last_index = i;
				cache(last_index);
				return last_index;
			}
		}
		return last_index;
	}
};

#if HALF_SIZE

class Curve90: public Trajectory {
public:
	Curve90(bool mirror = false) :
			Trajectory(), mirror(mirror) {
	}
	const float velocity = 200.0f;
	const float straight = 20.0f;
private:
	bool mirror;
	virtual int size() const {
		return 22;
	}
	virtual Position position(int index) const {
		static const float data[22 + 1][3] =
				{ { 0.0000000000, 0.0000000000, 0.0000000000 }, { 1.9999997991, 0.0006181047, 0.0012339644 }, { 3.9999728693, 0.0097791726, 0.0097058775 }, { 5.9995554509, 0.0485836092, 0.0318443870 }, { 7.9968678209, 0.1495283374, 0.0725500287 }, { 9.9862013601, 0.3526649515, 0.1346472802 }, { 11.9551325228, 0.7004568356, 0.2185687457 }, { 13.8823774910, 1.2316203735, 0.3223067850 }, { 15.7379353169, 1.9746892111, 0.4416379950 }, { 17.4864914608, 2.9426768362, 0.5705954436 }, { 19.0936777317, 4.1305966981, 0.7024742720 }, { 20.5306258844, 5.5196184093, 0.8344067267 }, { 21.7720449580, 7.0858724310, 0.9663381529 }, { 22.7977585870, 8.8011692317, 1.0966580379 }, { 23.5981111215, 10.6326800183, 1.2190895619 }, { 24.1815675481, 12.5446599188, 1.3273191357 }, { 24.5730987354, 14.5052822069, 1.4166211413 }, { 24.8094028304, 16.4908870257, 1.4843863209 }, { 24.9325972196, 18.4869120032, 1.5304135272 }, { 24.9838925910, 20.4861954519, 1.5569322142 }, { 24.9981494836, 22.4861338527, 1.5683531544 }, { 24.9996869625, 24.4861328259, 1.5707752539 }, { 25.0000000000, 25.0000000049, 1.5707963268 }, };
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
					+ Position((index - size()) * interval * cos(end.theta),
							(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
			return ret.mirror_x();
		return ret;
	}
};

class C30: public Trajectory {
public:
	C30(bool mirror = false) :
			Trajectory(), mirror(mirror) {
	}
	const float velocity = 761.5056368240381;
private:
	bool mirror;
	virtual int size() const {
		return 33;
	}
	virtual Position position(int index) const {
		static const float data[33 + 1][3] =
				{ { 0.0000000000, 0.0000000000, 0.0000000000 }, { 1.9999999986, 0.0000502581, 0.0001004536 }, { 3.9999998169, 0.0008011255, 0.0007991263 }, { 5.9999969173, 0.0040304778, 0.0026719061 }, { 7.9999773716, 0.0126275827, 0.0062508522 }, { 9.9998948870, 0.0304850952, 0.0120043334 }, { 11.9996352112, 0.0623531676, 0.0203195445 }, { 13.9989665875, 0.1136605100, 0.0314880521 }, { 15.9974804901, 0.1903081559, 0.0456949109 }, { 17.9945300480, 0.2984425368, 0.0630117555 }, { 19.9891758083, 0.4442153936, 0.0833941265 }, { 21.9801493466, 0.6335391051, 0.1066831300 }, { 23.9658444537, 0.8718471322, 0.1326113691 }, { 25.9443431852, 1.1638702507, 0.1608129257 }, { 27.9134801831, 1.5134397327, 0.1908370198 }, { 29.8709438578, 1.9233282844, 0.2221648374 }, { 31.8144079321, 2.3951380854, 0.2542288968 }, { 33.7416822788, 2.9292426264, 0.2864342331 }, { 35.6508686661, 3.5247854008, 0.3181806074 }, { 37.5405055286, 4.1797343225, 0.3488849138 }, { 39.4096864645, 4.8909866270, 0.3780029461 }, { 41.2581397367, 5.6545156125, 0.4050497129 }, { 43.0862602190, 6.4655484034, 0.4296175421 }, { 44.8950903243, 7.3187632191, 0.4513912987 }, { 46.6862517485, 8.2084953458, 0.4701601493 }, { 48.4618346500, 9.1289427965, 0.4858254319 }, { 50.2242546243, 10.0743649553, 0.4984043388 }, { 51.9760901761, 11.0392697698, 0.5080292754 }, { 53.7199142065, 12.0185867809, 0.5149429169 }, { 55.4581323950, 13.0078241819, 0.5194891500 }, { 57.1928394398, 14.0032081254, 0.5221002350 }, { 58.9257012620, 15.0018018568, 0.5232806708 }, { 60.6578678534, 16.0016012708, 0.5235883613 }, { 61.4711431703, 16.4711431703, 0.5235987756 }, };
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
					+ Position((index - size()) * interval * cos(end.theta),
							(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
			return ret.mirror_x();
		return ret;
	}
};

class C60: public Trajectory {
public:
	C60(bool mirror = false) :
			Trajectory(), mirror(mirror) {
	}
	const float velocity = 530.4534632991004f;
	const float straight1 = 30.0f;
	const float straight2 = 17.942286340599491f;
private:
	bool mirror;
	virtual int size() const {
		return 32;
	}
	virtual Position position(int index) const {
		static const float data[32 + 1][3] =
				{ { 0.0000000000, 0.0000000000, 0.0000000000 }, { 1.9999999937, 0.0001051362, 0.0002101373 }, { 3.9999991991, 0.0016757028, 0.0016713942 }, { 5.9999865195, 0.0084288816, 0.0055867697 }, { 7.9999011082, 0.0264006904, 0.0130648724 }, { 9.9995410013, 0.0637124598, 0.0250772813 }, { 11.9984086798, 0.1302532051, 0.0424211768 }, { 13.9954974873, 0.2372846201, 0.0656886795 }, { 15.9890389147, 0.3969756498, 0.0952440761 }, { 17.9762452012, 0.6218750465, 0.1312098082 }, { 19.9530919049, 0.9243344434, 0.1734617630 }, { 21.9141887720, 1.3159019568, 0.2216340466 }, { 23.8527827301, 1.8067164791, 0.2751330578 }, { 25.7609236015, 2.4049433852, 0.3331603181 }, { 27.6298021565, 3.1162999369, 0.3947431838 }, { 29.4502442467, 3.9437196189, 0.4587722552 }, { 31.2133184503, 4.8871964366, 0.5240440468 }, { 32.9109932326, 5.9438325418, 0.5893072754 }, { 34.5367678981, 7.1080879062, 0.6533109872 }, { 36.0862024589, 8.3722039727, 0.7148526719 }, { 37.5572849314, 9.7267502139, 0.7728245139 }, { 38.9505974406, 11.1612285472, 0.8262560007 }, { 40.2692697467, 12.6646685566, 0.8743512514 }, { 41.5187347623, 14.2261563424, 0.9165196271 }, { 42.7063207912, 15.8352585984, 0.9523984490 }, { 43.8407272220, 17.4823264197, 0.9818669468 }, { 44.9314342425, 19.1586852472, 1.0050509044 }, { 45.9880945420, 20.8567340000, 1.0223178219 }, { 47.0199483918, 22.5699853073, 1.0342627806 }, { 48.0352951664, 24.2930791963, 1.0416855551 }, { 49.0410456917, 26.0217957360, 1.0455598525 }, { 50.0423713382, 27.7530803061, 1.0469958614 }, { 51.0288568297, 29.4615242271, 1.0471975512 }, };
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
					+ Position((index - size()) * interval * cos(end.theta),
							(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
			return ret.mirror_x();
		return ret;
	}
};

class C90: public Trajectory {
public:
	C90(bool mirror = false) :
			Trajectory(), mirror(mirror) {
	}
	const float velocity = 514.3419901132443f;
private:
	bool mirror;
	virtual int size() const {
		return 39;
	}
	virtual Position position(int index) const {
		static const float data[39 + 1][3] =
				{ { 0.0000000000, 0.0000000000, 0.0000000000 }, { 1.9999999935, 0.0001062679, 0.0002124124 }, { 3.9999991810, 0.0016943744, 0.0016904409 }, { 5.9999861950, 0.0085281212, 0.0056557394 }, { 7.9998985213, 0.0267348438, 0.0132435644 }, { 9.9995277615, 0.0645911425, 0.0254633412 }, { 11.9983575484, 0.1322298235, 0.0431636004 }, { 13.9953353179, 0.2412722497, 0.0670025036 }, { 15.9885949741, 0.4043895846, 0.0974249818 }, { 17.9751624751, 0.6347967984, 0.1346472802 }, { 19.9506881998, 0.9456864600, 0.1786494467 }, { 21.9092563637, 1.3496163393, 0.2291760251 }, { 23.8433208395, 1.8578755425, 0.2857449286 }, { 25.7438072475, 2.4798665685, 0.3476641851 }, { 27.6004031342, 3.2225520918, 0.4140559739 }, { 29.4020331505, 4.0900214815, 0.4838871173 }, { 31.1374879887, 5.0832294844, 0.5560049689 }, { 32.7961494920, 6.1999463467, 0.6291784639 }, { 34.3686106467, 7.4350882329, 0.7024742721 }, { 35.8464001597, 8.7820654850, 0.7757700802 }, { 37.2215824920, 10.2336450092, 0.8490658884 }, { 38.4867730922, 11.7820320109, 0.9223616966 }, { 39.6351873590, 13.4189057067, 0.9956183107 }, { 40.6611869045, 15.1351723936, 1.0681348253 }, { 41.5617284336, 16.9204917719, 1.1386823359 }, { 42.3369256759, 18.7637373574, 1.2060833124 }, { 42.9900617105, 20.6537325671, 1.2692695221 }, { 43.5273801673, 22.5799114522, 1.3273191357 }, { 43.9576922460, 24.5328384473, 1.3794887476 }, { 44.2918495544, 26.5045485770, 1.4252391988 }, { 44.5421380654, 28.4886977649, 1.4642543050 }, { 44.7216442960, 30.4805390650, 1.4964518395 }, { 44.8436343728, 32.4767607366, 1.5219863895 }, { 44.9209739522, 34.4752338791, 1.5412439863 }, { 44.9656055142, 36.4747204317, 1.5548286962 }, { 44.9880914990, 38.4745876926, 1.5635416378 }, { 44.9972276576, 40.4745648950, 1.5683531544 }, { 44.9997300219, 42.4745629908, 1.5703691085 }, { 44.9999994932, 44.4745629578, 1.5707924688 }, { 45.0000000000, 45.0000000000, 1.5707963268 }, };
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
					+ Position((index - size()) * interval * cos(end.theta),
							(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
			return ret.mirror_x();
		return ret;
	}
};

class C120: public Trajectory {
public:
	C120(bool mirror = false) :
			Trajectory(), mirror(mirror) {
	}
	const float velocity = 704.6972922783409f;
private:
	bool mirror;
	virtual int size() const {
		return 63;
	}
	virtual Position position(int index) const {
		static const float data[63 + 1][3] =
				{ { 0.0000000000, 0.0000000000, 0.0000000000 }, { 1.9999999990, 0.0000413415, 0.0000826574 }, { 3.9999998756, 0.0006602372, 0.0006594205 }, { 5.9999978890, 0.0033321302, 0.0022152395 }, { 7.9999843446, 0.0104856826, 0.0052169232 }, { 9.9999263123, 0.0254576830, 0.0101044889 }, { 11.9997401200, 0.0524308557, 0.0172830094 }, { 13.9992496628, 0.0963552816, 0.0271151073 }, { 15.9981301705, 0.1628541051, 0.0399142351 }, { 17.9958388359, 0.2581140974, 0.0559388679 }, { 19.9915354857, 0.3887615574, 0.0753877133 }, { 21.9839981467, 0.5617240745, 0.0983960299 }, { 23.9715397780, 0.7840789367, 0.1250331205 }, { 25.9519334705, 1.0628895446, 0.1553010484 }, { 27.9223539325, 1.4050321029, 0.1891345993 }, { 29.8793429753, 1.8170160822, 0.2264024890 }, { 31.8188059100, 2.3048033702, 0.2669097965 }, { 33.7360442317, 2.8736324754, 0.3104015761 }, { 35.6258277554, 3.5278553969, 0.3565675808 }, { 37.4825065864, 4.2707955606, 0.4050480113 }, { 39.3001601791, 5.1046353352, 0.4554401831 }, { 41.0727775444, 6.0303408998, 0.5073059881 }, { 42.7944597407, 7.0476305960, 0.5601800119 }, { 44.4596334724, 8.1549904225, 0.6135781589 }, { 46.0632435928, 9.3497626605, 0.6670750275 }, { 47.6006734480, 10.6285728728, 0.7205719151 }, { 49.0675240904, 11.9877620838, 0.7740688028 }, { 50.4595985164, 13.4234413346, 0.8275656904 }, { 51.7729136746, 14.9315028102, 0.8810625780 }, { 53.0037118623, 16.5076315929, 0.9345594656 }, { 54.1484714773, 18.1473180089, 0.9880563532 }, { 55.2039170938, 19.8458705306, 1.0415532408 }, { 56.1670288346, 21.5984292011, 1.0950501284 }, { 57.0350510109, 23.3999795390, 1.1485470160 }, { 57.8055000079, 25.2453668863, 1.2020439036 }, { 58.4761713903, 27.1293111572, 1.2555407912 }, { 59.0451462099, 29.0464219451, 1.3090376788 }, { 59.5107964965, 30.9912139467, 1.3625345664 }, { 59.8717899152, 32.9581226559, 1.4160314541 }, { 60.1270935794, 34.9415202856, 1.4695283417 }, { 60.2759985693, 36.9357306423, 1.5229744273 }, { 60.3184977766, 38.9350446209, 1.5759998096 }, { 60.2557990782, 40.9338350662, 1.6281178663 }, { 60.0903549063, 42.9267650274, 1.6788585093 }, { 59.8257772802, 44.9089862103, 1.7277771733 }, { 59.4667159193, 46.8763062766, 1.7744630534 }, { 59.0187078757, 48.8253164984, 1.8185467174 }, { 58.4880083048, 50.7534744539, 1.8597069510 }, { 57.8814121708, 52.6591398067, 1.8976767098 }, { 57.2060758958, 54.5415644176, 1.9322480676 }, { 56.4693464363, 56.4008408097, 1.9632760691 }, { 55.6786032513, 58.2378151680, 1.9906814159 }, { 54.8411164445, 60.0539724982, 2.0144519358 }, { 53.9639222826, 61.8513023154, 2.0346428086 }, { 53.0537155635, 63.6321533402, 2.0513755433 }, { 52.1167570799, 65.3990852544, 2.0648357266 }, { 51.1587937680, 67.1547247372, 2.0752695845 }, { 50.1849890402, 68.9016318705, 2.0829794194 }, { 49.1998611959, 70.6421816765, 2.0883180086 }, { 48.2072285464, 72.3784640988, 2.0916820677 }, { 47.2101608400, 74.1122042411, 2.0935048994 }, { 46.2109375500, 75.8447031971, 2.0942483647 }, { 45.2110144628, 77.5767984059, 2.0943943251 }, { 45.0000000000, 77.9422863406, 2.0943951024 }, };
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
					+ Position((index - size()) * interval * cos(end.theta),
							(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
			return ret.mirror_x();
		return ret;
	}
};

class C150: public Trajectory {
public:
	C150(bool mirror = false) :
			Trajectory(), mirror(mirror) {
	}
	const float velocity = 740.2288193534528f;
	const float straight1 = 25.0f;
	const float straight2 = 4.115427290353293f;
private:
	bool mirror;
	virtual int size() const {
		return 76;
	}
	virtual Position position(int index) const {
		static const float data[76 + 1][3] =
				{ { 0.0000000000, 0.0000000000, 0.0000000000 }, { 1.9999999981, 0.0000356715, 0.0000713229 }, { 3.9999999061, 0.0005696680, 0.0005691455 }, { 5.9999983753, 0.0028765993, 0.0019128041 }, { 7.9999883910, 0.0090550461, 0.0045074283 }, { 9.9999446869, 0.0219970404, 0.0087371369 }, { 11.9998058281, 0.0453317399, 0.0149585860 }, { 13.9994375794, 0.0833721760, 0.0234949788 }, { 15.9985959429, 0.1410350699, 0.0346306369 }, { 17.9968682969, 0.2237558547, 0.0486062253 }, { 19.9936125615, 0.3373966350, 0.0656147099 }, { 21.9878913689, 0.4881243647, 0.0857981165 }, { 23.9783956088, 0.6823092704, 0.1092451455 }, { 25.9633876441, 0.9263770741, 0.1359896820 }, { 27.9406369575, 1.2266835573, 0.1660102266 }, { 29.9073840710, 1.5893665240, 0.1992302568 }, { 31.8603179624, 2.0201892627, 0.2355195120 }, { 33.7955839682, 2.5244094806, 0.2746961812 }, { 35.7088133836, 3.1066160691, 0.3165299570 }, { 37.5952001096, 3.7706165162, 0.3607459038 }, { 39.4495840574, 4.5193121906, 0.4070290752 }, { 41.2665883119, 5.3546123260, 0.4550298042 }, { 43.0407645118, 6.2773752942, 0.5043695759 }, { 44.7667531758, 7.2873820964, 0.5546473851 }, { 46.4394762801, 8.3833474147, 0.6054464714 }, { 48.0542836542, 9.5629798285, 0.6563746676 }, { 49.6069458429, 10.8232877930, 0.7073036653 }, { 51.0934360732, 12.1610027201, 0.7582326630 }, { 52.5099002107, 13.5726562187, 0.8091616607 }, { 53.8526645958, 15.0545871272, 0.8600906584 }, { 55.1182472438, 16.6029525655, 0.9110196561 }, { 56.3033665343, 18.2137376761, 0.9619486538 }, { 57.4049487494, 19.8827647221, 1.0128776515 }, { 58.4201376477, 21.6057061591, 1.0638066492 }, { 59.3463005452, 23.3780939348, 1.1147356470 }, { 60.1810354822, 25.1953313882, 1.1656646447 }, { 60.9221781863, 27.0527068505, 1.2165936424 }, { 61.5678065027, 28.9454032746, 1.2675226401 }, { 62.1162461622, 30.8685123927, 1.3184516378 }, { 62.5660751244, 32.8170478203, 1.3693806355 }, { 62.9161267130, 34.7859558328, 1.4203096332 }, { 63.1654932693, 36.7701311770, 1.4712386309 }, { 63.3135281248, 38.7644285309, 1.5221676286 }, { 63.3598473688, 40.7636756207, 1.5730966263 }, { 63.3043309060, 42.7626888499, 1.6240256240 }, { 63.1471226874, 44.7562839628, 1.6749546217 }, { 62.8886304327, 46.7392908487, 1.7258836194 }, { 62.5295243611, 48.7065679478, 1.7768126171 }, { 62.0707358352, 50.6530129699, 1.8277416148 }, { 61.5134545174, 52.5735787085, 1.8786706125 }, { 60.8591255236, 54.4632848562, 1.9295996103 }, { 60.1094457181, 56.3172308190, 1.9805286080 }, { 59.2663622931, 58.1306106068, 2.0314425569 }, { 58.3322537436, 59.8988269028, 2.0820974506 }, { 57.3103337796, 61.6177919913, 2.1320749286 }, { 56.2046595780, 63.2841334509, 2.1809632750 }, { 55.0200132318, 64.8953001289, 2.2283690667 }, { 53.7617281813, 66.4496583806, 2.2739237811 }, { 52.4355522301, 67.9465319030, 2.3172899863 }, { 51.0474750205, 69.3862137237, 2.3581670082 }, { 49.6035821713, 70.7699366196, 2.3962959804 }, { 48.1099262620, 72.0998162529, 2.4314641926 }, { 46.5723999405, 73.3787491241, 2.4635086627 }, { 44.9966561983, 74.6103157964, 2.4923188746 }, { 43.3880272983, 75.7986319918, 2.5178386342 }, { 41.7514814320, 76.9482195488, 2.5400670134 }, { 40.0915904180, 78.0638557220, 2.5590583656 }, { 38.4125146465, 79.1504180019, 2.5749214126 }, { 36.7179991521, 80.2127573497, 2.5878174189 }, { 35.0113762800, 81.2555432937, 2.5979574829 }, { 33.2955704953, 82.2831575678, 2.6055989913 }, { 31.5731038454, 83.2995724842, 2.6110412961 }, { 29.8460982684, 84.3082581118, 2.6146206869 }, { 28.1162747145, 85.3121056317, 2.6167047425 }, { 26.3849478311, 86.3133581347, 2.6176861569 }, { 24.6530196485, 87.3135704867, 2.6179761442 }, { 23.5640645809, 87.9422863548, 2.6179938780 }, };
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
					+ Position((index - size()) * interval * cos(end.theta),
							(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
			return ret.mirror_x();
		return ret;
	}
};

class C180: public Trajectory {
public:
	C180(bool mirror = false) :
			Trajectory(), mirror(mirror) {
	}
//	const float velocity = 818.9712226221780f;
	const float velocity = 600.0f;
	const float straight = 20.0f;
private:
	bool mirror;
	virtual int size() const {
		return 96;
	}
	virtual Position position(int index) const {
		static const float data[96 + 1][3] =
				{ { 0.0000000000, 0.0000000000, 0.0000000000 }, { 1.9999999996, 0.0000263425, 0.0000526730 }, { 3.9999999494, 0.0004209018, 0.0004205163 }, { 5.9999991403, 0.0021259420, 0.0014143745 }, { 7.9999936075, 0.0066975236, 0.0033365004 }, { 9.9999698099, 0.0162841234, 0.0064764061 }, { 11.9998930869, 0.0335970499, 0.0111068903 }, { 13.9996898093, 0.0618729410, 0.0174802934 }, { 15.9992226526, 0.1048286326, 0.0258250345 }, { 17.9982590072, 0.1666086669, 0.0363424766 }, { 19.9964331596, 0.2517256656, 0.0492041624 }, { 21.9932035091, 0.3649937609, 0.0645494605 }, { 23.9878066746, 0.5114552814, 0.0824836519 }, { 25.9792108754, 0.6963009564, 0.1030764858 }, { 27.9660713915, 0.9247840528, 0.1263612216 }, { 29.9466911945, 1.2021291170, 0.1523341729 }, { 31.9189899589, 1.5334363503, 0.1809547578 }, { 33.8804845816, 1.9235830950, 0.2121460562 }, { 35.8282840496, 2.3771244094, 0.2457958652 }, { 37.7591009805, 2.8981952316, 0.2817582392 }, { 39.6692814385, 3.4904170907, 0.3198554929 }, { 41.5548537162, 4.1568126847, 0.3598806402 }, { 43.4115957266, 4.8997318140, 0.4016002350 }, { 45.2351195243, 5.7207921063, 0.4447575749 }, { 47.0209703598, 6.6208376451, 0.4890762248 }, { 48.7647366504, 7.5999180172, 0.5342638109 }, { 50.4621664146, 8.6572894416, 0.5800160331 }, { 52.1092851222, 9.7914386235, 0.6260212589 }, { 53.7024764159, 11.0001715253, 0.6720535380 }, { 55.2383589628, 12.2809363471, 0.7180858170 }, { 56.7136788472, 13.6310196649, 0.7641180960 }, { 58.1253104615, 15.0475611968, 0.8101503751 }, { 59.4702631279, 16.5275598629, 0.8561826541 }, { 60.7456874342, 18.0678801430, 0.9022149332 }, { 61.9488812709, 19.6652587198, 0.9482472122 }, { 63.0772955556, 21.3163113926, 0.9942794912 }, { 64.1285396337, 23.0175402469, 1.0403117703 }, { 65.1003863431, 24.7653410650, 1.0863440493 }, { 65.9907767327, 26.5560109621, 1.1323763283 }, { 66.7978244245, 28.3857562311, 1.1784086074 }, { 67.5198196100, 30.2507003800, 1.2244408864 }, { 68.1552326727, 32.1468923444, 1.2704731655 }, { 68.7027174286, 34.0703148587, 1.3165054445 }, { 69.1611139784, 36.0168929664, 1.3625377235 }, { 69.5294511648, 37.9825026538, 1.4085700026 }, { 69.8069486299, 39.9629795871, 1.4546022816 }, { 69.9930184684, 41.9541279346, 1.5006345606 }, { 70.0872664735, 43.9517292561, 1.5466668397 }, { 70.0894929716, 45.9515514405, 1.5926991187 }, { 69.9996932458, 47.9493576712, 1.6387313977 }, { 69.8180575454, 49.9409154029, 1.6847636768 }, { 69.5449706831, 51.9220053281, 1.7307959558 }, { 69.1810112199, 53.8884303166, 1.7768282349 }, { 68.7269502390, 55.8360243072, 1.8228605139 }, { 68.1837497125, 57.7606611338, 1.8688927929 }, { 67.5525604632, 59.6582632675, 1.9149250720 }, { 66.8347197263, 61.5248104549, 1.9609573510 }, { 66.0317483169, 63.3563482356, 2.0069896300 }, { 65.1453474074, 65.1489963198, 2.0530219091 }, { 64.1773949238, 66.8989568096, 2.0990541881 }, { 63.1299415668, 68.6025222445, 2.1450864672 }, { 62.0052064675, 70.2560834569, 2.1911187462 }, { 60.8055724860, 71.8561372174, 2.2371510252 }, { 59.5335811625, 73.3992936577, 2.2831833043 }, { 58.1919273336, 74.8822834519, 2.3292155833 }, { 56.7834534224, 76.3019647429, 2.3752478623 }, { 55.3111434170, 77.6553297987, 2.4212801414 }, { 53.7781165483, 78.9395113848, 2.4673124204 }, { 52.1876206818, 80.1517888385, 2.5133446995 }, { 50.5430301282, 81.2896008531, 2.5593545365 }, { 48.8479452667, 82.3507270721, 2.6051262041 }, { 47.1063242948, 83.3336180147, 2.6503481858 }, { 45.3224084749, 84.2374919446, 2.6947157097 }, { 43.5006043813, 85.0623598636, 2.7379357310 }, { 41.6453672770, 85.8090277330, 2.7797309544 }, { 39.7610907224, 86.4790765589, 2.8198436396 }, { 37.8520069016, 87.0748219564, 2.8580391389 }, { 35.9221013299, 87.5992556729, 2.8941091178 }, { 33.9750445904, 88.0559721590, 2.9278744143 }, { 32.0141426340, 88.4490836153, 2.9591874977 }, { 30.0423060549, 88.7831270055, 2.9879344935 }, { 28.0620376956, 89.0629663682, 3.0140367467 }, { 26.0754370215, 89.2936934081, 3.0374519008 }, { 24.0842189694, 89.4805288873, 3.0581744793 }, { 22.0897444499, 89.6287268238, 3.0762359610 }, { 20.0930593854, 89.7434829945, 3.0917043479 }, { 18.0949390723, 89.8298487941, 3.1046832319 }, { 16.0959347671, 89.8926511340, 3.1153103728 }, { 14.0964196733, 89.9364188077, 3.1237558079 }, { 12.0966319230, 89.9653155915, 3.1302195180 }, { 10.0967126691, 89.9830802769, 3.1349286828 }, { 8.0967379965, 89.9929738290, 3.1381345630 }, { 6.0967439860, 89.9977338934, 3.1401090515 }, { 4.0967448875, 89.9995369183, 3.1411409420 }, { 2.0967449467, 89.9999681800, 3.1415319652 }, { 0.0967449473, 89.9999999999, 3.1415926476 }, { 0.0000000000, 90.0000000000, 3.1415926536 }, };
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
					+ Position((index - size()) * interval * cos(end.theta),
							(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
			return ret.mirror_x();
		return ret;
	}
};

#else

class Curve90: public Trajectory {
public:
	Curve90(bool mirror = false) :
	Trajectory(), mirror(mirror) {
	}
	const float velocity = 600.0f;
private:
	bool mirror;
	virtual int size() const {
		return 158;
	}
	virtual Position position(int index) const {
		static const float data[158 + 1][3] =
		{	{	0, 0, 0}, {1, 0, 0}, {2, 0, 0}, {3, 0, 0}, {4, 0, 0}, {5, 0, 0}, {6, 0, 0}, {7, 0, 0}, {8, 0, 0}, {9, 0, 0}, {10, 0, 0}, {11, 0, 0}, {12, 0, 0}, {13, 0, 0}, {14, 0, 0}, {15, 0, 0}, {16, 0, 0}, {17, 0, 0}, {18, 0, 0}, {19, 0, 0}, {20, 0, 0}, {21.002, 1.4543e-05, 7.5223e-05}, {22.002, 0.00030398, 0.00057718}, {23.002, 0.0013334, 0.0015505}, {24.002, 0.0035741, 0.0029951}, {25.002, 0.0074974, 0.004911}, {26.001, 0.013575, 0.0072982}, {27.001, 0.022277, 0.010157}, {28.001, 0.034076, 0.013487}, {29.001, 0.049442, 0.017288}, {30.001, 0.068847, 0.02156}, {31.001, 0.092762, 0.026304}, {32, 0.12166, 0.031519}, {33, 0.156, 0.037206}, {33.999, 0.19627, 0.043364}, {34.998, 0.24292, 0.049993}, {35.996, 0.29644, 0.057093}, {36.995, 0.35728, 0.064665}, {37.992, 0.42591, 0.072708}, {38.989, 0.5028, 0.081223}, {39.986, 0.58842, 0.090208}, {40.981, 0.68322, 0.099665}, {41.976, 0.78767, 0.10959}, {42.969, 0.90222, 0.11999}, {43.961, 1.0273, 0.13086}, {44.952, 1.1635, 0.14221}, {45.941, 1.3111, 0.15402}, {46.928, 1.4706, 0.16631}, {47.913, 1.6424, 0.17906}, {48.896, 1.827, 0.19229}, {49.876, 2.0249, 0.20599}, {50.854, 2.2364, 0.22016}, {51.828, 2.4619, 0.2348}, {52.799, 2.702, 0.24991}, {53.766, 2.9569, 0.2655}, {54.728, 3.227, 0.28155}, {55.687, 3.5128, 0.29808}, {56.64, 3.8147, 0.31508}, {57.588, 4.1329, 0.33255}, {58.53, 4.4679, 0.35049}, {59.466, 4.8199, 0.3689}, {60.395, 5.1893, 0.38778}, {61.317, 5.5764, 0.40714}, {62.232, 5.9816, 0.42696}, {63.138, 6.4049, 0.44726}, {64.035, 6.8468, 0.46803}, {64.922, 7.3075, 0.48927}, {65.8, 7.787, 0.51098}, {66.666, 8.2858, 0.53317}, {67.522, 8.8038, 0.55582}, {68.365, 9.3413, 0.57894}, {69.195, 9.8983, 0.60247}, {70.013, 10.475, 0.62604}, {70.816, 11.07, 0.64962}, {71.605, 11.685, 0.67319}, {72.379, 12.317, 0.69676}, {73.138, 12.968, 0.72034}, {73.882, 13.637, 0.74391}, {74.61, 14.323, 0.76748}, {75.321, 15.025, 0.79106}, {76.016, 15.745, 0.81463}, {76.693, 16.48, 0.8382}, {77.353, 17.232, 0.86178}, {77.995, 17.998, 0.88535}, {78.619, 18.78, 0.90892}, {79.224, 19.576, 0.93249}, {79.81, 20.386, 0.95607}, {80.377, 21.21, 0.97964}, {80.925, 22.047, 1.003}, {81.452, 22.896, 1.0259}, {81.961, 23.757, 1.0483}, {82.45, 24.629, 1.0703}, {82.921, 25.511, 1.0918}, {83.372, 26.404, 1.1128}, {83.805, 27.305, 1.1333}, {84.219, 28.215, 1.1534}, {84.615, 29.133, 1.173}, {84.994, 30.059, 1.1921}, {85.355, 30.992, 1.2108}, {85.698, 31.931, 1.229}, {86.025, 32.876, 1.2467}, {86.335, 33.827, 1.2639}, {86.629, 34.782, 1.2807}, {86.907, 35.743, 1.297}, {87.17, 36.708, 1.3128}, {87.417, 37.677, 1.3282}, {87.65, 38.649, 1.3431}, {87.869, 39.625, 1.3575}, {88.074, 40.604, 1.3714}, {88.265, 41.585, 1.3849}, {88.443, 42.569, 1.3979}, {88.609, 43.555, 1.4104}, {88.763, 44.544, 1.4225}, {88.905, 45.533, 1.4341}, {89.035, 46.525, 1.4452}, {89.155, 47.518, 1.4559}, {89.265, 48.512, 1.466}, {89.364, 49.507, 1.4757}, {89.455, 50.503, 1.485}, {89.536, 51.499, 1.4937}, {89.609, 52.497, 1.502}, {89.673, 53.494, 1.5098}, {89.731, 54.493, 1.5172}, {89.781, 55.492, 1.524}, {89.824, 56.491, 1.5304}, {89.862, 57.49, 1.5364}, {89.893, 58.489, 1.5418}, {89.92, 59.489, 1.5468}, {89.941, 60.489, 1.5513}, {89.959, 61.489, 1.5554}, {89.972, 62.489, 1.559}, {89.982, 63.489, 1.5621}, {89.99, 64.489, 1.5647}, {89.995, 65.488, 1.5669}, {89.998, 66.488, 1.5686}, {89.999, 67.488, 1.5698}, {90, 68.488, 1.5705}, {90, 69.488, 1.5708}, {90, 70.478, 1.5708}, {90, 71.478, 1.5708}, {90, 72.478, 1.5708}, {90, 73.478, 1.5708}, {90, 74.478, 1.5708}, {90, 75.478, 1.5708}, {90, 76.478, 1.5708}, {90, 77.478, 1.5708}, {90, 78.478, 1.5708}, {90, 79.478, 1.5708}, {90, 80.478, 1.5708}, {90, 81.478, 1.5708}, {90, 82.478, 1.5708}, {90, 83.478, 1.5708}, {90, 84.478, 1.5708}, {90, 85.478, 1.5708}, {90, 86.478, 1.5708}, {90, 87.478, 1.5708}, {90, 88.478, 1.5708}, {90, 89.478, 1.5708}, {90, 90, 1.5708},};
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
			+ Position((index - size()) * interval * cos(end.theta),
					(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
		return ret.mirror_x();
		return ret;
	}
};

class C45: public Trajectory {
public:
	C45(bool mirror = false) :
	Trajectory(), mirror(mirror) {
	}
	const float velocity = 166.6857084868538f;
	const float straight = 37.279220613578566f;
private:
	bool mirror;
	virtual int size() const {
		return 88;
	}
	virtual Position position(int index) const {
		static const float data[88 + 1][3] =
		{	{	0.0000000000, 0.0000000000, 0.0000000000}, {2.0000000000, 0.0000039170, 0.0000078333}, {3.9999999989, 0.0000626391, 0.0000626173}, {5.9999999809, 0.0003168352, 0.0002110584}, {7.9999998572, 0.0010001391, 0.0004993749}, {9.9999993217, 0.0024379331, 0.0009730569}, {11.9999975804, 0.0050456524, 0.0016766289}, {13.9999929192, 0.0093266211, 0.0026534183}, {15.9999820780, 0.0158694277, 0.0039453294}, {17.9999594058, 0.0253448544, 0.0055926254}, {19.9999157781, 0.0385023726, 0.0076337186}, {21.9998372647, 0.0561662197, 0.0101049705}, {23.9997035452, 0.0792310744, 0.0130405021}, {25.9994860756, 0.1086573449, 0.0164720165}, {27.9991460211, 0.1454660912, 0.0204286337}, {29.9986319745, 0.1907335959, 0.0249367390}, {31.9978774931, 0.2455856056, 0.0300198453}, {33.9967984891, 0.3111912615, 0.0356984710}, {35.9952905208, 0.3887567396, 0.0419900330}, {37.9932260360, 0.4795186245, 0.0489087559}, {39.9904516237, 0.5847370393, 0.0564655981}, {41.9867853384, 0.7056885591, 0.0646681945}, {43.9820141598, 0.8436589361, 0.0735208170}, {45.9758916572, 0.9999356688, 0.0830243520}, {47.9681359247, 1.1758004512, 0.0931762961}, {49.9584278555, 1.3725215399, 0.1039707686}, {51.9464098181, 1.5913460848, 0.1153985428}, {53.9316847955, 1.8334924687, 0.1274470936}, {55.9138160408, 2.1001427099, 0.1401006627}, {57.8923272975, 2.3924349824, 0.1533403410}, {59.8667036218, 2.7114563137, 0.1671441670}, {61.8363928357, 3.0582355238, 0.1814872407}, {63.8008076293, 3.4337364686, 0.1963418540}, {65.7593283168, 3.8388516559, 0.2116776346}, {67.7113062400, 4.2743962982, 0.2274617041}, {69.6560677986, 4.7411028698, 0.2436588496}, {71.5929190760, 5.2396162285, 0.2602317066}, {73.5211510127, 5.7704893615, 0.2771409541}, {75.4400450711, 6.3341798080, 0.2943455191}, {77.3488793216, 6.9310468041, 0.3118027904}, {79.2469348709, 7.5613491871, 0.3294688410}, {81.1335025441, 8.2252440876, 0.3472986563}, {83.0078897252, 8.9227864258, 0.3652463688}, {84.8694272566, 9.6539292173, 0.3832654973}, {86.7174762923, 10.4185246843, 0.4013091882}, {88.5514350037, 11.2163261517, 0.4193304602}, {90.3707450307, 12.0469907005, 0.4372824490}, {92.1748975833, 12.9100825356, 0.4551186507}, {93.9634390948, 13.8050770184, 0.4727931646}, {95.7359763437, 14.7313653028, 0.4902609323}, {97.4921809641, 15.6882595053, 0.5074779717}, {99.2317932777, 16.6749983365, 0.5244016070}, {100.9546253926, 17.6907531122, 0.5409906901}, {102.6605635237, 18.7346340645, 0.5572058155}, {104.3495695065, 19.8056968690, 0.5730095251}, {106.0216814851, 20.9029493069, 0.5883665036}, {107.6770137711, 22.0253579845, 0.6032437624}, {109.3157558817, 23.1718550343, 0.6176108112}, {110.9381707775, 24.3413447323, 0.6314398168}, {112.5445923306, 25.5327099690, 0.6447057484}, {114.1354220663, 26.7448185232, 0.6573865076}, {115.7111252264, 27.9765290951, 0.6694630437}, {117.2722262150, 29.2266970639, 0.6809194527}, {118.8193034880, 30.4941799466, 0.6917430603}, {120.3529839585, 31.7778425415, 0.7019244881}, {121.8739369883, 33.0765617508, 0.7114577019}, {123.3828680423, 34.3892310821, 0.7203400436}, {124.8805120812, 35.7147648393, 0.7285722450}, {126.3676267688, 37.0521020147, 0.7361584235}, {127.8449855694, 38.4002099047, 0.7431060616}, {129.3133708076, 39.7580874681, 0.7494259669}, {130.7735667621, 41.1247684550, 0.7551322164}, {132.2263528581, 42.4993243305, 0.7602420831}, {133.6724970244, 43.8808670181, 0.7647759461}, {135.1127492688, 45.2685514883, 0.7687571842}, {136.5478355285, 46.6615782103, 0.7722120544}, {137.9784518395, 48.0591954879, 0.7751695550}, {139.4052588684, 49.4607016893, 0.7776612747}, {140.8288768400, 50.8654473803, 0.7797212281}, {142.2498808900, 52.2728373640, 0.7813856783}, {143.6687968653, 53.6823326231, 0.7826929482}, {145.0860975869, 55.0934521565, 0.7836832211}, {146.5021995842, 56.5057746986, 0.7843983311}, {147.9174603048, 57.9189402992, 0.7848815455}, {149.3321757951, 59.3326517451, 0.7851773392}, {150.7465788432, 60.7466757937, 0.7853311632}, {152.1608375688, 62.1608441910, 0.7853892079}, {153.5750544422, 63.5750544422, 0.7853981627}, {153.6396103068, 63.6396103068, 0.7853981634},};
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
			+ Position((index - size()) * interval * cos(end.theta),
					(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
		return ret.mirror_x();
		return ret;
	}
};

class C4545: public Trajectory {
public:
	C4545(bool mirror = false) :
	Trajectory(), mirror(mirror) {
	}
	const float velocity = 1383.38f;
	const float straight = 0;
private:
	bool mirror;
	virtual int size() const {
		return 109;
	}
	virtual Position position(int index) const {
		static const float data[109 + 1][3] =
		{	{	0.00000000, 0.00000000, 0.00000000}, {2.00000000, 0.00000428, 0.00000851}, {4.00000000, 0.00006875, 0.00006856}, {5.99999998, 0.00034840, 0.00023175}, {7.99999983, 0.00110105, 0.00054928}, {9.99999918, 0.00268638, 0.00107178}, {11.99999705, 0.00556458, 0.00184910}, {13.99999136, 0.01029455, 0.00293010}, {15.99997810, 0.01753182, 0.00436250}, {17.99995029, 0.02802602, 0.00619268}, {19.99989662, 0.04261802, 0.00846551}, {21.99979976, 0.06223672, 0.01122418}, {23.99963426, 0.08789543, 0.01451002}, {25.99936417, 0.12068799, 0.01836235}, {27.99894024, 0.16178447, 0.02281837}, {29.99829681, 0.21242658, 0.02791294}, {31.99734837, 0.27392268, 0.03367852}, {33.99598577, 0.34764253, 0.04014500}, {35.99407220, 0.43501164, 0.04733962}, {37.99143896, 0.53750533, 0.05528684}, {39.98788104, 0.65664242, 0.06400826}, {41.98315260, 0.79397858, 0.07352254}, {43.97696240, 0.95109938, 0.08384531}, {45.96896930, 1.12961302, 0.09498914}, {47.95877783, 1.33114264, 0.10696347}, {49.94593403, 1.55731848, 0.11977457}, {51.92992150, 1.80976959, 0.13342556}, {53.91015790, 2.09011540, 0.14791633}, {55.88599188, 2.39995695, 0.16324359}, {57.85670054, 2.74086798, 0.17940087}, {59.82148763, 3.11438584, 0.19637855}, {61.77948235, 3.52200230, 0.21416386}, {63.72973906, 3.96515431, 0.23274099}, {65.67123773, 4.44521481, 0.25209110}, {67.60288540, 4.96348362, 0.27219243}, {69.52351857, 5.52117853, 0.29302033}, {71.43190653, 6.11942672, 0.31454742}, {73.32675577, 6.75925647, 0.33674363}, {75.20671531, 7.44158947, 0.35957637}, {77.07038305, 8.16723363, 0.38301061}, {78.91631308, 8.93687662, 0.40700905}, {80.74302381, 9.75108018, 0.43153223}, {82.54900698, 10.61027533, 0.45653870}, {84.33273742, 11.51475854, 0.48198516}, {86.09268332, 12.46468895, 0.50782666}, {87.82731719, 13.46008670, 0.53401673}, {89.53512703, 14.50083242, 0.56050758}, {91.21462783, 15.58666787, 0.58725027}, {92.86437322, 16.71719790, 0.61419490}, {94.48296690, 17.89189350, 0.64129081}, {96.06907406, 19.11009608, 0.66848678}, {97.62143260, 20.37102256, 0.69572790}, {99.13886298, 21.67377254, 0.72297935}, {100.62023250, 23.01738587, 0.75023081}, {102.06444112, 24.40086479, 0.77748226}, {103.47041637, 25.82318194, 0.80473371}, {104.83711417, 27.28328111, 0.83198516}, {106.16351962, 28.78007804, 0.85923661}, {107.44870823, 30.31241137, 0.88637740}, {108.69178881, 31.87909689, 0.91360797}, {109.89180157, 33.47901047, 0.94076865}, {111.04801520, 35.11085799, 0.96780796}, {112.15982496, 36.77327745, 0.99467487}, {113.22675762, 38.46485012, 1.02131902}, {114.24847523, 40.18411196, 1.04769089}, {115.22477776, 41.92956525, 1.07374199}, {116.15560441, 43.69969007, 1.09942506}, {117.04103385, 45.49295577, 1.12469424}, {117.88128320, 47.30783204, 1.14950524}, {118.67670584, 49.14279957, 1.17381551}, {119.42778825, 50.99636017, 1.19758441}, {120.13514570, 52.86704620, 1.22077336}, {120.79951712, 54.75342919, 1.24334598}, {121.42175904, 56.65412770, 1.26526824}, {122.00283885, 58.56781416, 1.28650858}, {122.54382736, 60.49322087, 1.30703803}, {123.04589084, 62.42914486, 1.32683035}, {123.51028260, 64.37445193, 1.34586206}, {123.93833428, 66.32807951, 1.36411260}, {124.33144684, 68.28903872, 1.38156439}, {124.69108138, 70.25641534, 1.39820288}, {125.01874993, 72.22936997, 1.41401659}, {125.31600626, 74.20713737, 1.42899721}, {125.58443667, 76.18902497, 1.44313959}, {125.82565101, 78.17441074, 1.45644175}, {126.04127379, 80.16274046, 1.46890494}, {126.23293559, 82.15352440, 1.48053356}, {126.40226465, 84.14633367, 1.49133523}, {126.55087877, 86.14079616, 1.50132068}, {126.68037756, 88.13659223, 1.51050375}, {126.79233490, 90.13345028, 1.51890135}, {126.88829182, 92.13114216, 1.52653336}, {126.96974963, 94.12947867, 1.53342259}, {127.03816348, 96.12830504, 1.53959465}, {127.09493616, 98.12749659, 1.54507790}, {127.14141232, 100.12695457, 1.54990331}, {127.17887294, 102.12660224, 1.55410436}, {127.20853019, 104.12638126, 1.55771689}, {127.23152268, 106.12624831, 1.56077900}, {127.24891091, 108.12617218, 1.56333086}, {127.26167320, 110.12613110, 1.56541459}, {127.27070186, 112.12611049, 1.56707411}, {127.27679982, 114.12610105, 1.56835493}, {127.28067749, 116.12609722, 1.56930400}, {127.28295010, 118.12609589, 1.56996954}, {127.28413531, 120.12609553, 1.57040086}, {127.28465128, 122.12609545, 1.57064814}, {127.28481504, 124.12609545, 1.57076227}, {127.28484129, 126.12609545, 1.57079464}, {127.2792206135786, 127.2792206135786, 1.570796326794897},};
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
			+ Position((index - size()) * interval * cos(end.theta),
					(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
		return ret.mirror_x();
		return ret;
	}
};

class C90: public Trajectory {
public:
	C90(bool mirror = false) :
	Trajectory(), mirror(mirror) {
	}
	const float velocity = 978.16f;
private:
	bool mirror;
	virtual int size() const {
		return 77;
	}
	virtual Position position(int index) const {
		static const float data[77 + 1][3] =
		{	{	0.00000000, 0.00000000, 0.00000000}, {2.00000000, 0.00001210, 0.00002407}, {3.99999999, 0.00019437, 0.00019379}, {5.99999982, 0.00098441, 0.00065443}, {7.99999862, 0.00310828, 0.00154907}, {9.99999345, 0.00757508, 0.00301745}, {11.99997668, 0.01566917, 0.00519498}, {13.99993189, 0.02894042, 0.00821166}, {15.99982803, 0.04919235, 0.01219111}, {17.99961161, 0.07846821, 0.01724964}, {19.99919689, 0.11903517, 0.02349534}, {21.99845405, 0.17336650, 0.03102726}, {23.99719546, 0.24412183, 0.03993469}, {25.99516030, 0.33412559, 0.05029644}, {27.99199781, 0.44634339, 0.06218028}, {29.98724959, 0.58385665, 0.07564239}, {31.98033142, 0.74983526, 0.09072693}, {33.97051531, 0.94750836, 0.10746575}, {35.95691218, 1.18013339, 0.12587811}, {37.93845614, 1.45096338, 0.14597052}, {39.91389085, 1.76321283, 0.16773674}, {41.88175877, 2.12002221, 0.19115778}, {43.84039399, 2.52442165, 0.21620208}, {45.78791927, 2.97929410, 0.24282572}, {47.72224775, 3.48733854, 0.27097277}, {49.64108994, 4.05103390, 0.30057573}, {51.54196612, 4.67260426, 0.33155600}, {53.42222441, 5.35398637, 0.36382452}, {55.27906443, 6.09679989, 0.39728243}, {57.10956626, 6.90232164, 0.43182183}, {58.91072448, 7.77146420, 0.46732658}, {60.67948637, 8.70475994, 0.50367320}, {62.41279376, 9.70235087, 0.54073183}, {64.10762738, 10.76398490, 0.57836717}, {65.76105274, 11.88901883, 0.61643954}, {67.37026637, 13.07642811, 0.65480593}, {68.93264108, 14.32482339, 0.69332112}, {70.44593600, 15.63228034, 0.73172659}, {71.90773183, 16.99707258, 0.77026743}, {73.31585491, 18.41717621, 0.80880827}, {74.66821385, 19.89048207, 0.84734912}, {75.96286755, 21.41474644, 0.88570386}, {77.19807299, 22.98756986, 0.92419955}, {78.37195877, 24.60667542, 0.96251530}, {79.48321349, 26.26939362, 1.00050626}, {80.53089477, 27.97288845, 1.03803006}, {81.51444425, 29.71420293, 1.07494786}, {82.43369596, 31.49030541, 1.11112544}, {83.28887774, 33.29813521, 1.14643421}, {84.08060612, 35.13464648, 1.18075218}, {84.80987485, 36.99684933, 1.21396491}, {85.47803762, 38.88184726, 1.24596635}, {86.08678577, 40.78687002, 1.27665967}, {86.63812145, 42.70930152, 1.30595801}, {87.13432732, 44.64670228, 1.33378507}, {87.57793339, 46.59682619, 1.36007580}, {87.97168198, 48.55763182, 1.38477678}, {88.31849135, 50.52728812, 1.40784673}, {88.62141886, 52.50417511, 1.42925673}, {88.88362426, 54.48687997, 1.44899052}, {89.10833343, 56.47418900, 1.46704457}, {89.29880325, 58.46507619, 1.48342814}, {89.45828770, 60.45868908, 1.49816318}, {89.59000557, 62.45433260, 1.51128418}, {89.69710984, 64.45145157, 1.52283792}, {89.78265888, 66.44961267, 1.53288308}, {89.84958957, 68.44848625, 1.54148984}, {89.90069227, 70.44782890, 1.54873930}, {89.93858767, 72.44746687, 1.55472288}, {89.96570561, 74.44728108, 1.55954165}, {89.98426580, 76.44719378, 1.56330551}, {89.99626038, 78.44715714, 1.56613241}, {90.00343857, 80.44714393, 1.56814741}, {90.00729316, 82.44714006, 1.56948176}, {90.00904913, 84.44713924, 1.57027187}, {90.00965430, 86.44713914, 1.57065829}, {90.00977211, 88.44713913, 1.57078466}, {90, 90, 1.570796326794816},};
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
			+ Position((index - size()) * interval * cos(end.theta),
					(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
		return ret.mirror_x();
		return ret;
	}
};

class C135: public Trajectory {
public:
	C135(bool mirror = false) :
	Trajectory(), mirror(mirror) {
	}
	const float velocity = 1056.21f;
private:
	bool mirror;
	virtual int size() const {
		return 209;
	}
	virtual Position position(int index) const {
		static const float data[210][3] =
		{	{	0.00000000, 0.00000000, 0.00000000}, {1.00000000, 0.00000060, 0.00000239}, {2.00000000, 0.00000966, 0.00001926}, {3.00000000, 0.00004896, 0.00006515}, {3.99999999, 0.00015480, 0.00015454}, {4.99999997, 0.00037793, 0.00030183}, {5.99999988, 0.00078346, 0.00052136}, {6.99999966, 0.00145078, 0.00082732}, {7.99999913, 0.00247339, 0.00123378}, {8.99999801, 0.00395878, 0.00175462}, {9.99999585, 0.00602825, 0.00240356}, {10.99999194, 0.00881669, 0.00319409}, {11.99998522, 0.01247239, 0.00413950}, {12.99997420, 0.01715677, 0.00525278}, {13.99995680, 0.02304413, 0.00654670}, {14.99993022, 0.03032138, 0.00803369}, {15.99989080, 0.03918768, 0.00972588}, {16.99983376, 0.04985417, 0.01163509}, {17.99975305, 0.06254358, 0.01377274}, {18.99964112, 0.07748988, 0.01614992}, {19.99948860, 0.09493788, 0.01877729}, {20.99928411, 0.11514281, 0.02166515}, {21.99901391, 0.13836992, 0.02482332}, {22.99866159, 0.16489397, 0.02826122}, {23.99820776, 0.19499882, 0.03198780}, {24.99762966, 0.22897688, 0.03601154}, {25.99690084, 0.26712865, 0.04034043}, {26.99599072, 0.30976213, 0.04498197}, {27.99486425, 0.35719232, 0.04994314}, {28.99348147, 0.40974061, 0.05523040}, {29.99179710, 0.46773417, 0.06084970}, {30.98976017, 0.53150540, 0.06680642}, {31.98731350, 0.60139123, 0.07310540}, {32.98439341, 0.67773247, 0.07975092}, {33.98092918, 0.76087320, 0.08674671}, {34.97684273, 0.85115998, 0.09409589}, {35.97204817, 0.94894123, 0.10180105}, {36.96645146, 1.05456642, 0.10986417}, {37.95994999, 1.16838537, 0.11828665}, {38.95243228, 1.29074746, 0.12706931}, {39.94377762, 1.42200086, 0.13621238}, {40.93385579, 1.56249175, 0.14571551}, {41.92252680, 1.71256344, 0.15557773}, {42.90964067, 1.87255565, 0.16579753}, {43.89503720, 2.04280358, 0.17637278}, {44.87854585, 2.22363715, 0.18730080}, {45.85998563, 2.41538010, 0.19857830}, {46.83916503, 2.61834916, 0.21020146}, {47.81588203, 2.83285319, 0.22216586}, {48.78992410, 3.05919238, 0.23446654}, {49.76106836, 3.29765732, 0.24709799}, {50.72908168, 3.54852826, 0.26005416}, {51.69372091, 3.81207420, 0.27332847}, {52.65473317, 4.08855217, 0.28691382}, {53.61185613, 4.37820638, 0.30080260}, {54.56481845, 4.68126749, 0.31498672}, {55.51334023, 4.99795186, 0.32945758}, {56.45713347, 5.32846084, 0.34420614}, {57.39590270, 5.67298012, 0.35922290}, {58.32934558, 6.03167911, 0.37449790}, {59.25715355, 6.40471030, 0.39002079}, {60.17901266, 6.79220881, 0.40578079}, {61.09460425, 7.19429180, 0.42176676}, {62.00360588, 7.61105814, 0.43796717}, {62.90569213, 8.04258795, 0.45437014}, {63.80053558, 8.48894234, 0.47096347}, {64.68780776, 8.95016316, 0.48773465}, {65.56718010, 9.42627278, 0.50467088}, {66.43832500, 9.91727404, 0.52175906}, {67.30091682, 10.42315014, 0.53898590}, {68.15463295, 10.94386471, 0.55633783}, {68.99915491, 11.47936191, 0.57380110}, {69.83416934, 12.02956661, 0.59136179}, {70.65936913, 12.59438459, 0.60900579}, {71.47445446, 13.17370295, 0.62671889}, {72.27913384, 13.76739040, 0.64448672}, {73.07312512, 14.37529781, 0.66229488}, {73.85615651, 14.99725869, 0.68012885}, {74.62796787, 15.63308940, 0.69797200}, {75.38831083, 16.28259079, 0.71581841}, {76.13694206, 16.94555741, 0.73366482}, {76.87362312, 17.62177813, 0.75151123}, {77.59811941, 18.31103758, 0.76935764}, {78.31020017, 19.01311625, 0.78720405}, {79.00963862, 19.72779052, 0.80505046}, {79.69621200, 20.45483279, 0.82289687}, {80.36970163, 21.19401150, 0.84074328}, {81.02989304, 21.94509123, 0.85858968}, {81.67657595, 22.70783278, 0.87643609}, {82.30954440, 23.48199323, 0.89428250}, {82.92859681, 24.26732601, 0.91212891}, {83.53353601, 25.06358101, 0.92997532}, {84.12416934, 25.87050463, 0.94782173}, {84.70030870, 26.68783987, 0.96566814}, {85.26177058, 27.51532644, 0.98351455}, {85.80837617, 28.35270078, 1.00136096}, {86.33995139, 29.19969620, 1.01920737}, {86.85632693, 30.05604295, 1.03705378}, {87.35733834, 30.92146830, 1.05490019}, {87.84282606, 31.79569661, 1.07274660}, {88.31263545, 32.67844946, 1.09059301}, {88.76661690, 33.56944570, 1.10843941}, {89.20462581, 34.46840157, 1.12628582}, {89.62652270, 35.37503075, 1.14413223}, {90.03217318, 36.28904451, 1.16197864}, {90.42144807, 37.21015173, 1.17982505}, {90.79422338, 38.13805907, 1.19767146}, {91.15038040, 39.07247099, 1.21551787}, {91.48980569, 40.01308990, 1.23336428}, {91.81239115, 40.95961622, 1.25121069}, {92.11803404, 41.91174851, 1.26905710}, {92.40663702, 42.86918351, 1.28690351}, {92.67810817, 43.83161630, 1.30474992}, {92.93236103, 44.79874035, 1.32259633}, {93.16931463, 45.77024766, 1.34044273}, {93.38889350, 46.74582881, 1.35828914}, {93.59102771, 47.72517309, 1.37613555}, {93.77565288, 48.70796860, 1.39398196}, {93.94271020, 49.69390232, 1.41182837}, {94.09214649, 50.68266026, 1.42967478}, {94.22391413, 51.67392750, 1.44752119}, {94.33797117, 52.66738835, 1.46536760}, {94.43428128, 53.66272639, 1.48321401}, {94.51281378, 54.65962464, 1.50106042}, {94.57354367, 55.65776558, 1.51890683}, {94.61645160, 56.65683133, 1.53675324}, {94.64152391, 57.65650369, 1.55459965}, {94.64875261, 58.65646430, 1.57244606}, {94.63813540, 59.65639466, 1.59029246}, {94.60967567, 60.65597632, 1.60813887}, {94.56338246, 61.65489094, 1.62598528}, {94.49927054, 62.65282035, 1.64383169}, {94.41736032, 63.64944675, 1.66167810}, {94.31774094, 64.64445905, 1.67945753}, {94.20039088, 65.63753632, 1.69728772}, {94.06536668, 66.62836530, 1.71508932}, {93.91274665, 67.61663694, 1.73284786}, {93.74262862, 68.60204739, 1.75054892}, {93.55512959, 69.58429899, 1.76817817}, {93.35038535, 70.56310140, 1.78572142}, {93.12855000, 71.53817254, 1.80316459}, {92.88979537, 72.50923958, 1.82049379}, {92.63431051, 73.47603989, 1.83769530}, {92.36230099, 74.43832184, 1.85475562}, {92.07398822, 75.39584570, 1.87166146}, {91.76960875, 76.34838430, 1.88839981}, {91.44941348, 77.29572381, 1.90495790}, {91.11366683, 78.23766429, 1.92132329}, {90.76264596, 79.17402031, 1.93748384}, {90.39663987, 80.10462138, 1.95342772}, {90.01594853, 81.02931242, 1.96914349}, {89.62088203, 81.94795409, 1.98462007}, {89.21175963, 82.86042301, 1.99984676}, {88.78890888, 83.76661205, 2.01481328}, {88.35266473, 84.66643039, 2.02950976}, {87.90336860, 85.55980359, 2.04392679}, {87.44136756, 86.44667359, 2.05805541}, {86.96701336, 87.32699862, 2.07188711}, {86.48066167, 88.20075304, 2.08541390}, {85.98267118, 89.06792714, 2.09862825}, {85.47340283, 89.92852687, 2.11152318}, {84.95321899, 90.78257348, 2.12409219}, {84.42248275, 91.63010316, 2.13632934}, {83.88155714, 92.47116659, 2.14822923}, {83.33080449, 93.30582843, 2.15978699}, {82.77058574, 94.13416682, 2.17099833}, {82.20125984, 94.95627276, 2.18185951}, {81.62318313, 95.77224955, 2.19236738}, {81.03670883, 96.58221209, 2.20251934}, {80.44218650, 97.38628621, 2.21231339}, {79.83996155, 98.18460801, 2.22174812}, {79.23037482, 98.97732307, 2.23082268}, {78.61376216, 99.76458573, 2.23953683}, {77.99045403, 100.54655834, 2.24789090}, {77.36077517, 101.32341046, 2.25588584}, {76.72504430, 102.09531809, 2.26352315}, {76.08357378, 102.86246290, 2.27080494}, {75.43666939, 103.62503139, 2.27773387}, {74.78463006, 104.38321416, 2.28431320}, {74.12774767, 105.13720507, 2.29054677}, {73.46630686, 105.88720051, 2.29643895}, {72.80058480, 106.63339858, 2.30199469}, {72.13085110, 107.37599840, 2.30721948}, {71.45736759, 108.11519930, 2.31211937}, {70.78038825, 108.85120013, 2.31670091}, {70.10015901, 109.58419854, 2.32097119}, {69.41691770, 110.31439029, 2.32493781}, {68.73089388, 111.04196860, 2.32860884}, {68.04230878, 111.76712349, 2.33199285}, {67.35137517, 112.49004115, 2.33509890}, {66.65829726, 113.21090337, 2.33793646}, {65.96327064, 113.92988698, 2.34051546}, {65.26648211, 114.64716329, 2.34284627}, {64.56810967, 115.36289757, 2.34493962}, {63.86832235, 116.07724862, 2.34680668}, {63.16728015, 116.79036825, 2.34845894}, {62.46513394, 117.50240093, 2.34990828}, {61.76202537, 118.21348334, 2.35116688}, {61.05808672, 118.92374405, 2.35224726}, {60.35344087, 119.63330318, 2.35316221}, {59.64820115, 120.34227208, 2.35392480}, {58.94247128, 121.05075306, 2.35454834}, {58.23634523, 121.75883921, 2.35504637}, {57.52990719, 122.46661408, 2.35543264}, {56.82323141, 123.17415160, 2.35572109}, {56.11638217, 123.88151583, 2.35592578}, {55.40941370, 124.58876089, 2.35606097}, {54.70237008, 125.29593083, 2.35614097}, {53.99528522, 126.00305953, 2.35618023}, {52.7224975411232, 127.2758562643776, 2.35619322},};
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
			+ Position((index - size()) * interval * cos(end.theta),
					(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
		return ret.mirror_x();
		return ret;
	}
};

class C180: public Trajectory {
public:
	C180(bool mirror = false) :
	Trajectory(), mirror(mirror) {
	}
	const float velocity = 1623.31f;
private:
	bool mirror;
	virtual int size() const {
		return 390;
	}
	virtual Position position(int index) const {
		static const float data[391][3] =
		{	{	0.00000000, 0.00000000, 0.00000000}, {1.00000000, 0.00000017, 0.00000066}, {2.00000000, 0.00000266, 0.00000531}, {3.00000000, 0.00001349, 0.00001795}, {4.00000000, 0.00004266, 0.00004260}, {5.00000000, 0.00010418, 0.00008324}, {5.99999999, 0.00021605, 0.00014385}, {6.99999997, 0.00040023, 0.00022841}, {7.99999993, 0.00068267, 0.00034087}, {8.99999985, 0.00109323, 0.00048516}, {9.99999968, 0.00166571, 0.00066519}, {10.99999938, 0.00243781, 0.00088484}, {11.99999887, 0.00345109, 0.00114798}, {12.99999802, 0.00475098, 0.00145844}, {13.99999667, 0.00638669, 0.00182001}, {14.99999462, 0.00841122, 0.00223645}, {15.99999156, 0.01088134, 0.00271148}, {16.99998712, 0.01385747, 0.00324880}, {17.99998081, 0.01740374, 0.00385203}, {18.99997204, 0.02158787, 0.00452477}, {19.99996005, 0.02648115, 0.00527057}, {20.99994390, 0.03215840, 0.00609292}, {21.99992249, 0.03869790, 0.00699527}, {22.99989444, 0.04618135, 0.00798100}, {23.99985816, 0.05469379, 0.00905345}, {24.99981174, 0.06432357, 0.01021587}, {25.99975293, 0.07516228, 0.01147149}, {26.99967914, 0.08730467, 0.01282344}, {27.99958733, 0.10084859, 0.01427480}, {28.99947402, 0.11589494, 0.01582858}, {29.99933524, 0.13254756, 0.01748771}, {30.99916645, 0.15091320, 0.01925507}, {31.99896250, 0.17110140, 0.02113343}, {32.99871759, 0.19322446, 0.02312552}, {33.99842520, 0.21739731, 0.02523396}, {34.99807803, 0.24373745, 0.02746132}, {35.99766795, 0.27236488, 0.02981006}, {36.99718593, 0.30340198, 0.03228258}, {37.99662197, 0.33697343, 0.03488116}, {38.99596504, 0.37320612, 0.03760804}, {39.99520301, 0.41222908, 0.04046534}, {40.99432259, 0.45417332, 0.04345509}, {41.99330924, 0.49917180, 0.04657924}, {42.99214711, 0.54735927, 0.04983964}, {43.99081895, 0.59887220, 0.05323805}, {44.98930608, 0.65384868, 0.05677614}, {45.98758826, 0.71242826, 0.06045547}, {46.98564364, 0.77475189, 0.06427750}, {47.98344870, 0.84096179, 0.06824362}, {48.98097815, 0.91120133, 0.07235509}, {49.97820486, 0.98561489, 0.07661307}, {50.97509979, 1.06434779, 0.08101865}, {51.97163193, 1.14754613, 0.08557279}, {52.96776820, 1.23535665, 0.09027635}, {53.96347340, 1.32792664, 0.09513009}, {54.95871011, 1.42540381, 0.10013467}, {55.95343867, 1.52793610, 0.10529065}, {56.94761708, 1.63567163, 0.11059848}, {57.94120094, 1.74875850, 0.11605849}, {58.93414338, 1.86734466, 0.12167093}, {59.92639504, 1.99157781, 0.12743593}, {60.91790397, 2.12160521, 0.13335352}, {61.90861560, 2.25757357, 0.13942363}, {62.89847269, 2.39962889, 0.14564606}, {63.88741528, 2.54791631, 0.15202053}, {64.87538067, 2.70257997, 0.15854665}, {65.86230334, 2.86376287, 0.16522393}, {66.84811496, 3.03160670, 0.17205175}, {67.83274437, 3.20625170, 0.17902942}, {68.81611751, 3.38783651, 0.18615612}, {69.79815744, 3.57649801, 0.19343094}, {70.77878433, 3.77237119, 0.20085287}, {71.75791546, 3.97558895, 0.20842080}, {72.73546519, 4.18628201, 0.21613349}, {73.71134501, 4.40457871, 0.22398964}, {74.68546350, 4.63060488, 0.23198783}, {75.65772642, 4.86448368, 0.24012655}, {76.62803668, 5.10633547, 0.24840418}, {77.59629440, 5.35627763, 0.25681902}, {78.56239695, 5.61442443, 0.26536926}, {79.52623899, 5.88088689, 0.27405301}, {80.48771251, 6.15577265, 0.28286828}, {81.44670695, 6.43918579, 0.29181299}, {82.40310918, 6.73122673, 0.30088498}, {83.35680366, 7.03199206, 0.31008198}, {84.30767248, 7.34157446, 0.31940166}, {85.25559543, 7.66006251, 0.32884159}, {86.20045017, 7.98754064, 0.33839925}, {87.14211223, 8.32408894, 0.34807206}, {88.08045523, 8.66978308, 0.35785734}, {89.01535091, 9.02469421, 0.36775235}, {89.94666930, 9.38888883, 0.37775426}, {90.87427883, 9.76242871, 0.38786017}, {91.79804648, 10.14537080, 0.39806711}, {92.71783792, 10.53776710, 0.40837204}, {93.63351763, 10.93966467, 0.41877185}, {94.54494910, 11.35110544, 0.42926338}, {95.45199494, 11.77212623, 0.43984338}, {96.35451709, 12.20275868, 0.45050855}, {97.25237693, 12.64302914, 0.46125554}, {98.14543551, 13.09295869, 0.47208094}, {99.03355369, 13.55256308, 0.48298128}, {99.91659234, 14.02185267, 0.49395303}, {100.79441247, 14.50083247, 0.50499263}, {101.66687551, 14.98950207, 0.51609647}, {102.53384339, 15.48785566, 0.52726088}, {103.39517882, 15.99588204, 0.53848217}, {104.25074540, 16.51356460, 0.54975658}, {105.10040787, 17.04088139, 0.56108035}, {105.94403229, 17.57780510, 0.57244967}, {106.78148620, 18.12430312, 0.58386068}, {107.61263885, 18.68033761, 0.59530952}, {108.43736136, 19.24586550, 0.60679230}, {109.25552694, 19.82083858, 0.61830507}, {110.06701103, 20.40520359, 0.62984392}, {110.87169155, 20.99890228, 0.64140487}, {111.66944902, 21.60187147, 0.65298395}, {112.46016677, 22.21404320, 0.66457717}, {113.24373112, 22.83534481, 0.67618053}, {114.02003154, 23.46569902, 0.68779004}, {114.78897458, 24.10500763, 0.69935605}, {115.55045808, 24.75318326, 0.71096785}, {116.30436392, 25.41015719, 0.72257965}, {117.05059046, 26.07584083, 0.73419146}, {117.78903708, 26.75014444, 0.74580326}, {118.51960421, 27.43297710, 0.75741506}, {119.24219335, 28.12424673, 0.76902687}, {119.95670706, 28.82386013, 0.78063867}, {120.66304902, 29.53172298, 0.79225047}, {121.36112398, 30.24773982, 0.80386227}, {122.05083781, 30.97181412, 0.81547408}, {122.73209753, 31.70384824, 0.82708588}, {123.40481128, 32.44374349, 0.83869768}, {124.06888835, 33.19140010, 0.85030949}, {124.72423920, 33.94671727, 0.86192129}, {125.37077548, 34.70959315, 0.87353309}, {126.00841000, 35.47992488, 0.88514490}, {126.63705680, 36.25760860, 0.89675670}, {127.25663111, 37.04253945, 0.90836850}, {127.86704939, 37.83461160, 0.91998030}, {128.46822934, 38.63371824, 0.93159211}, {129.06008990, 39.43975164, 0.94320391}, {129.64255127, 40.25260312, 0.95481571}, {130.21553491, 41.07216306, 0.96642752}, {130.77896357, 41.89832098, 0.97803932}, {131.33276128, 42.73096548, 0.98965112}, {131.87685337, 43.56998429, 1.00126293}, {132.41116647, 44.41526429, 1.01287473}, {132.93562855, 45.26669150, 1.02448653}, {133.45016889, 46.12415112, 1.03609833}, {133.95471811, 46.98752755, 1.04771014}, {134.44920818, 47.85670436, 1.05932194}, {134.93357244, 48.73156436, 1.07093374}, {135.40774557, 49.61198961, 1.08254555}, {135.87166363, 50.49786138, 1.09415735}, {136.32526408, 51.38906023, 1.10576915}, {136.76848576, 52.28546600, 1.11738096}, {137.20126891, 53.18695783, 1.12899276}, {137.62355517, 54.09341416, 1.14060456}, {138.03528760, 55.00471277, 1.15221636}, {138.43641070, 55.92073080, 1.16382817}, {138.82687037, 56.84134473, 1.17543997}, {139.20661397, 57.76643044, 1.18705177}, {139.57559030, 58.69586319, 1.19866358}, {139.93374960, 59.62951766, 1.21027538}, {140.28104359, 60.56726797, 1.22188718}, {140.61742544, 61.50898768, 1.23349899}, {140.94284980, 62.45454982, 1.24511079}, {141.25727278, 63.40382689, 1.25672259}, {141.56065199, 64.35669090, 1.26833439}, {141.85294653, 65.31301337, 1.27994620}, {142.13411699, 66.27266535, 1.29155800}, {142.40412545, 67.23551747, 1.30316980}, {142.66293551, 68.20143989, 1.31478161}, {142.91051228, 69.17030237, 1.32639341}, {143.14682236, 70.14197428, 1.33800521}, {143.37183391, 71.11632461, 1.34961702}, {143.58551658, 72.09322199, 1.36122882}, {143.78784155, 73.07253469, 1.37284062}, {143.97878156, 74.05413068, 1.38445242}, {144.15831085, 75.03787759, 1.39606423}, {144.32640521, 76.02364280, 1.40767603}, {144.48304200, 77.01129339, 1.41928783}, {144.62820007, 78.00069619, 1.43089964}, {144.76185987, 78.99171779, 1.44251144}, {144.88400337, 79.98422459, 1.45412324}, {144.99461409, 80.97808274, 1.46573505}, {145.09367714, 81.97315825, 1.47734685}, {145.18117914, 82.96931696, 1.48895865}, {145.25710831, 83.96642454, 1.50057045}, {145.32145441, 84.96434655, 1.51218226}, {145.37420875, 85.96294844, 1.52379406}, {145.41536422, 86.96209558, 1.53540586}, {145.44491529, 87.96165323, 1.54701767}, {145.46285795, 88.96148663, 1.55862947}, {145.46918980, 89.96146096, 1.57024127}, {145.46390998, 90.96144141, 1.58185308}, {145.44701920, 91.96129313, 1.59346488}, {145.41851973, 92.96088131, 1.60507668}, {145.37841543, 93.96007119, 1.61668848}, {145.32671170, 94.95872803, 1.62830029}, {145.26341550, 95.95671719, 1.63991209}, {145.18853538, 96.95390410, 1.65152389}, {145.10208143, 97.95015431, 1.66313570}, {145.00406531, 98.94533349, 1.67474750}, {144.89450023, 99.93930746, 1.68635930}, {144.77340097, 100.93194220, 1.69797111}, {144.64078385, 101.92310388, 1.70958291}, {144.49666676, 102.91265884, 1.72119471}, {144.34106912, 103.90047367, 1.73280651}, {144.17401192, 104.88641518, 1.74441832}, {143.99551768, 105.87035043, 1.75603012}, {143.80561047, 106.85214675, 1.76764192}, {143.60431589, 107.83167176, 1.77925373}, {143.39166108, 108.80879340, 1.79086553}, {143.16767473, 109.78337992, 1.80247733}, {142.93238702, 110.75529990, 1.81408914}, {142.68582968, 111.72442231, 1.82570094}, {142.42803596, 112.69061648, 1.83731274}, {142.15904062, 113.65375212, 1.84892454}, {141.87887992, 114.61369938, 1.86053635}, {141.58759164, 115.57032883, 1.87214815}, {141.28521505, 116.52351148, 1.88375995}, {140.97179093, 117.47311881, 1.89537176}, {140.64736153, 118.41902279, 1.90698356}, {140.31197060, 119.36109587, 1.91859536}, {139.96566336, 120.29921103, 1.93020717}, {139.60848651, 121.23324179, 1.94181897}, {139.24048819, 122.16306221, 1.95343077}, {138.86171804, 123.08854691, 1.96504257}, {138.47222711, 124.00957111, 1.97665438}, {138.07206794, 124.92601064, 1.98826618}, {137.66129446, 125.83774191, 1.99987798}, {137.23996207, 126.74464200, 2.01148979}, {136.80812758, 127.64658864, 2.02310159}, {136.36584921, 128.54346021, 2.03471339}, {135.91318659, 129.43513578, 2.04632520}, {135.45020077, 130.32149512, 2.05793700}, {134.97695415, 131.20241873, 2.06954880}, {134.49351056, 132.07778783, 2.08116060}, {133.99993518, 132.94748439, 2.09277241}, {133.49629455, 133.81139114, 2.10438421}, {132.98265659, 134.66939161, 2.11599601}, {132.45909054, 135.52137011, 2.12760782}, {131.92566701, 136.36721176, 2.13921962}, {131.38245791, 137.20680252, 2.15083142}, {130.82953649, 138.04002918, 2.16244323}, {130.26697731, 138.86677940, 2.17405503}, {129.69485620, 139.68694170, 2.18566683}, {129.11325031, 140.50040550, 2.19727863}, {128.52223806, 141.30706112, 2.20889044}, {127.92189914, 142.10679980, 2.22050224}, {127.31231450, 142.89951370, 2.23211404}, {126.69356632, 143.68509593, 2.24372585}, {126.06573803, 144.46344059, 2.25533765}, {125.42891429, 145.23444272, 2.26694945}, {124.78318095, 145.99799837, 2.27856126}, {124.12862509, 146.75400458, 2.29017306}, {123.46533496, 147.50235942, 2.30178486}, {122.79339999, 148.24296199, 2.31339666}, {122.11291079, 148.97571242, 2.32500847}, {121.42395909, 149.70051193, 2.33662027}, {120.72663781, 150.41726279, 2.34823207}, {120.02104095, 151.12586835, 2.35984388}, {119.30726366, 151.82623307, 2.37145568}, {118.58540217, 152.51826251, 2.38306748}, {117.85555382, 153.20186338, 2.39467929}, {117.11781701, 153.87694350, 2.40629109}, {116.37229122, 154.54341185, 2.41790289}, {115.61907696, 155.20117856, 2.42951469}, {114.85827579, 155.85015495, 2.44112650}, {114.09000464, 156.49027082, 2.45268717}, {113.31437109, 157.12144542, 2.46429706}, {112.53146370, 157.74357466, 2.47590119}, {111.74139271, 158.35658089, 2.48749555}, {110.94427153, 158.96039099, 2.49907617}, {110.14021655, 159.55493658, 2.51063903}, {109.32934701, 160.14015405, 2.52218017}, {108.51178476, 160.71598469, 2.53369562}, {107.68765414, 161.28237477, 2.54518145}, {106.85708175, 161.83927564, 2.55663372}, {106.02019628, 162.38664375, 2.56804854}, {105.17712832, 162.92444077, 2.57942202}, {104.32801018, 163.45263362, 2.59075034}, {103.47297568, 163.97119451, 2.60202966}, {102.61215997, 164.48010099, 2.61325621}, {101.74569933, 164.97933598, 2.62442625}, {100.87373101, 165.46888777, 2.63553606}, {99.99639298, 165.94875007, 2.64658200}, {99.11382382, 166.41892198, 2.65756042}, {98.22616245, 166.87940800, 2.66846777}, {97.33354800, 167.33021802, 2.67930052}, {96.43611963, 167.77136730, 2.69005519}, {95.53401632, 168.20287641, 2.70072837}, {94.62737670, 168.62477127, 2.71131670}, {93.71633891, 169.03708299, 2.72181686}, {92.80104040, 169.43984795, 2.73222563}, {91.88161778, 169.83310762, 2.74253981}, {90.95820664, 170.21690857, 2.75275630}, {90.03094144, 170.59130238, 2.76287204}, {89.09995533, 170.95634554, 2.77288407}, {88.16538001, 171.31209939, 2.78278947}, {87.22734561, 171.65863000, 2.79258541}, {86.28598053, 171.99600810, 2.80226914}, {85.34141136, 172.32430895, 2.81183798}, {84.39376272, 172.64361226, 2.82128933}, {83.44315716, 172.95400204, 2.83062066}, {82.48971508, 173.25556653, 2.83982956}, {81.53355461, 173.54839801, 2.84891365}, {80.57479152, 173.83259274, 2.85787069}, {79.61353913, 174.10825079, 2.86669848}, {78.64990828, 174.37547592, 2.87539496}, {77.68400718, 174.63437544, 2.88395811}, {76.71594143, 174.88506007, 2.89238603}, {75.74581391, 175.12764380, 2.90067692}, {74.77372475, 175.36224372, 2.90882905}, {73.79977129, 175.58897994, 2.91684081}, {72.82404804, 175.80797535, 2.92471067}, {71.84664668, 176.01935556, 2.93243720}, {70.86765597, 176.22324869, 2.94001909}, {69.88716182, 176.41978523, 2.94745509}, {68.90524722, 176.60909790, 2.95474409}, {67.92199226, 176.79132151, 2.96188507}, {66.93747415, 176.96659277, 2.96887709}, {65.95176719, 177.13505017, 2.97571934}, {64.96494283, 177.29683380, 2.98241110}, {63.97706965, 177.45208524, 2.98895177}, {62.98821340, 177.60094736, 2.99534083}, {61.99843707, 177.74356421, 3.00157788}, {61.00780085, 177.88008085, 3.00766263}, {60.01636223, 178.01064321, 3.01359487}, {59.02417602, 178.13539792, 3.01937453}, {58.03129440, 178.25449222, 3.02500162}, {57.03776698, 178.36807376, 3.03047627}, {56.04364084, 178.47629048, 3.03579870}, {55.04896060, 178.57929048, 3.04096925}, {54.05376848, 178.67722186, 3.04598836}, {53.05810437, 178.77023261, 3.05085656}, {52.06200587, 178.85847045, 3.05557452}, {51.06550838, 178.94208271, 3.06014297}, {50.06864516, 179.02121619, 3.06456278}, {49.07144744, 179.09601707, 3.06883490}, {48.07394441, 179.16663072, 3.07296040}, {47.07616337, 179.23320163, 3.07694042}, {46.07812978, 179.29587327, 3.08077624}, {45.07986733, 179.35478794, 3.08446922}, {44.08139801, 179.41008674, 3.08802080}, {43.08274219, 179.46190934, 3.09143256}, {42.08391871, 179.51039398, 3.09470615}, {41.08494493, 179.55567725, 3.09784331}, {40.08583683, 179.59789410, 3.10084589}, {39.08660907, 179.63717763, 3.10371582}, {38.08727505, 179.67365905, 3.10645514}, {37.08784701, 179.70746756, 3.10906596}, {36.08833606, 179.73873025, 3.11155048}, {35.08875231, 179.76757202, 3.11391101}, {34.08910485, 179.79411545, 3.11614992}, {33.08940192, 179.81848076, 3.11826968}, {32.08965087, 179.84078569, 3.12027283}, {31.08985830, 179.86114540, 3.12216201}, {30.09003007, 179.87967244, 3.12393990}, {29.09017139, 179.89647659, 3.12560931}, {28.09028684, 179.91166487, 3.12717308}, {27.09038046, 179.92534139, 3.12863415}, {26.09045576, 179.93760732, 3.12999552}, {25.09051582, 179.94856078, 3.13126026}, {24.09056327, 179.95829681, 3.13243150}, {23.09060039, 179.96690730, 3.13351244}, {22.09062912, 179.97448088, 3.13450636}, {21.09065108, 179.98110291, 3.13541657}, {20.09066765, 179.98685539, 3.13624646}, {19.09067998, 179.99181691, 3.13699947}, {18.09068901, 179.99606261, 3.13767907}, {17.09069552, 179.99966411, 3.13828883}, {16.09070010, 180.00268946, 3.13883232}, {15.09070327, 180.00520310, 3.13931317}, {14.09070541, 180.00726581, 3.13973508}, {13.09070681, 180.00893468, 3.14010176}, {12.09070769, 180.01026305, 3.14041696}, {11.09070823, 180.01130049, 3.14068448}, {10.09070855, 180.01209278, 3.14090815}, {9.09070872, 180.01268182, 3.14109182}, {8.09070881, 180.01310567, 3.14123937}, {7.09070886, 180.01339847, 3.14135471}, {6.09070888, 180.01359047, 3.14144178}, {5.09070888, 180.01370795, 3.14150452}, {4.09070889, 180.01377326, 3.14154691}, {3.09070889, 180.01380473, 3.14157292}, {2.09070889, 180.01381676, 3.14158654}, {1.09070889, 180.01381970, 3.14159179}, {0, 180, 3.14159265},};
		Position ret;
		if (index < 0) {
			ret = Position(0 + interval * index, 0, 0);
		} else if (index > size() - 1) {
			Position end(data[size()][0], data[size()][1], data[size()][2]);
			ret = end
			+ Position((index - size()) * interval * cos(end.theta),
					(index - size()) * interval * sin(end.theta), 0);
		} else {
			ret = Position(data[index][0], data[index][1], data[index][2]);
		}
		if (mirror)
		return ret.mirror_x();
		return ret;
	}
};

#endif

class MoveAction {
public:
	MoveAction(Buzzer *bz, Motor *mt, Encoders *enc, MPU6500 *mpu, Reflector *rfl, WallDetector *wd,
			SpeedController *sc) :
			bz(bz), mt(mt), enc(enc), mpu(mpu), rfl(rfl), wd(wd), sc(sc), thread(
			PRIORITY_MOVE_ACTION, STACK_SIZE_MOVE_ACTION) {
		set_params(600);
		ticker.attach_us(this, &MoveAction::isr, MOVE_ACTION_PERIOD);
	}
	enum ACTION {
		START_STEP, START_INIT, GO_STRAIGHT, GO_HALF, TURN_LEFT_90, TURN_RIGHT_90, RETURN, STOP,
	};
	enum FAST_ACTION
		:char {
			FAST_GO_STRAIGHT = 's',
		FAST_GO_HALF = 'x',
		FAST_TURN_LEFT_30 = 'w',
		FAST_TURN_RIGHT_30 = 'W',
		FAST_TURN_LEFT_60 = 'z',
		FAST_TURN_RIGHT_60 = 'c',
		FAST_TURN_LEFT_60R = 'Z',
		FAST_TURN_RIGHT_60R = 'C',
		FAST_TURN_LEFT_120 = 'q',
		FAST_TURN_RIGHT_120 = 'e',
		FAST_TURN_LEFT_90 = 'L',
		FAST_TURN_RIGHT_90 = 'R',
		FAST_TURN_LEFT_150 = 'a',
		FAST_TURN_RIGHT_150 = 'd',
		FAST_TURN_LEFT_150R = 'A',
		FAST_TURN_RIGHT_150R = 'D',
		FAST_TURN_LEFT_180 = 'Q',
		FAST_TURN_RIGHT_180 = 'E',
	};
	struct Operation {
		enum ACTION action;
		int num;
	};
	const char* action_string(enum ACTION action) {
		static const char name[][32] =
				{ "start_step", "start_init", "go_straight", "go_half", "turn_left_90", "turn_right_90", "return", "stop", };
		return name[action];
	}
	void enable(const float speed = 200) {
		rfl->enable();
		sc->enable();
		if (path.size() > 0) {
			thread.start(this, &MoveAction::fastRun);
			this->fast_speed = speed;
		} else {
			thread.start(this, &MoveAction::searchRun);
			this->search_speed = speed;
		}
	}
	void disable() {
		thread.terminate();
		sc->disable();
		rfl->disable();
		while (q.size()) {
			q.pop();
		}
		path.clear();
	}
	void set_action(FAST_ACTION action, const int num = 1) {
		for (int i = 0; i < num; i++)
			path += action;
	}
	void set_action(string actions) {
		path = actions;
	}
	void set_action(enum ACTION action, int num = 1) {
		struct Operation operation;
		operation.action = action;
		operation.num = num;
		q.push(operation);
	}
	void set_params(float fast_speed) {
		this->fast_speed = fast_speed;
	}
	void set_params_relative(float add) {
		this->fast_speed += add;
	}
	int actions() const {
		return q.size() + path.size();
	}
	void printPosition(const char* name) {
		printf("%s\t", name);
//		printf("Ori:(%06.1f, %06.1f, %06.3f)\t", origin.x, origin.y, origin.theta);
//		printf("Abs:(%06.1f, %06.1f, %06.3f)\t", sc->getPosition().x, sc->getPosition().y,
//				sc->getPosition().theta);
		printf("Rel:(%06.1f, %06.1f, %06.3f)\t", getRelativePosition().x, getRelativePosition().y,
				getRelativePosition().theta);
		printf("\n");
	}
	Position getRelativePosition() {
		return (sc->getPosition() - origin).rotate(-origin.theta);
	}
	void updateOrigin(Position passed) {
		origin += passed.rotate(origin.theta);
	}
	void setPosition(Position pos = Position(SEGMENT_WIDTH / 2, WALL_THICKNESS / 2 + MACHINE_TAIL_LENGTH, M_PI / 2)) {
		origin = pos;
		sc->getPosition() = pos;
	}
	void fixPosition(Position pos) {
		sc->getPosition() -= pos;
	}
private:
	Buzzer *bz;
	Motor *mt;
	Encoders *enc;
	MPU6500 *mpu;
	Reflector *rfl;
	WallDetector *wd;
	SpeedController *sc;
	Thread thread;
	Ticker ticker;
	Timer timer;
	float fast_speed;
	float search_speed;
	Position origin;
	std::queue<struct Operation> q;
	string path;

	void isr() {
		thread.signal_set(0x01);
	}
	void wall_avoid() {
#if WALL_AVOID_ENABLED
		const float gain = WALL_AVOID_GAIN;
		if (wd->wall().side[0]) {
			fixPosition(Position(0, wd->wall_difference().side[0] * gain * sc->actual.trans, 0).rotate(origin.theta));
		}
		if (wd->wall().side[1]) {
			fixPosition(Position(0, -wd->wall_difference().side[1] * gain * sc->actual.trans, 0).rotate(origin.theta));
		}
#endif
	}
	void wall_attach() {
#if WALL_ATTACH_ENABLED
		if (wd->wall().flont[0] && wd->wall().flont[1]) {
			while (1) {
				float trans = wd->wall_difference().flont[0] + wd->wall_difference().flont[1];
				float rot = wd->wall_difference().flont[1] - wd->wall_difference().flont[0];
				sc->set_target(trans * 100, rot * 10);
				if (fabs(trans) < 0.1f && fabs(rot) < 0.1f)
				break;
				Thread::wait(1);
			}
			sc->set_target(0, 0);
			printPosition("1");
			fixPosition(Position(getRelativePosition().x, 0, 0).rotate(origin.theta));
			printPosition("2");
			bz->play(Buzzer::SELECT);
			Thread::wait(1000);
			while (1) {
				Position cur = getRelativePosition();
				if (fabs(10 - cur.x) < 0.1)
				break;
				Thread::signal_wait(0x01);
				sc->set_target((10 - cur.x) * 100, -cur.y * 1);
			}
			sc->set_target(0, 0);
			printPosition("3");
			fixPosition(Position(getRelativePosition().x, 0, 0).rotate(origin.theta));
			printPosition("4");
			bz->play(Buzzer::SELECT);
			Thread::wait(1000);
		}
#endif
	}
	void turn(const float angle) {
		const float speed = 2 * M_PI;
		const float accel = 48 * M_PI;
		timer.reset();
		timer.start();
		while (1) {
			Thread::signal_wait(0x01);
			if (fabs(sc->actual.rot) > speed)
				break;
			if (angle > 0) {
				sc->set_target(0, timer.read() * accel);
			} else {
				sc->set_target(0, -timer.read() * accel);
			}
		}
		while (1) {
			Thread::signal_wait(0x01);
			if (fabs(sc->actual.rot) < 0.2)
				break;
			float extra = angle - getRelativePosition().theta;
			float target_speed = sqrt(2 * accel * fabs(extra));
			target_speed = (target_speed > speed) ? speed : target_speed;
			if (extra > 0) {
				sc->set_target(0, target_speed);
			} else {
				sc->set_target(0, -target_speed);
			}
		}
		updateOrigin(Position(0, 0, angle));
	}
	void straight_x(const float distance, const float v_max, const float v_end, bool avoid = true) {
		const float accel = 3000;
		const float decel = 3000;
		Trajectory st;
		timer.reset();
		timer.start();
		float v_start = sc->actual.trans;
//		bool isAccel = true;
		while (1) {
			if (getRelativePosition().x > distance - 5.0f)
				break;
			if (v_end < 1.0f && sc->actual.trans < 1.0f)
				break;
			Thread::signal_wait(0x01);
			float extra = distance - getRelativePosition().x;
			float velocity_a = v_start + timer.read() * accel;
			float velocity_d = sqrt(2 * decel * fabs(extra) + v_end * v_end);
			float velocity = v_max;
			if (velocity > velocity_d)
				velocity = velocity_d;
			if (velocity > velocity_a)
				velocity = velocity_a;
			Position dir = st.getNextDir(getRelativePosition(), velocity);
			sc->set_target(velocity, dir.theta * TRAJECTORY_PROP_GAIN);
			if (avoid)
				wall_avoid();
		}
		sc->set_target(v_end, 0);
//		printPosition("Straight");
		updateOrigin(Position(distance, 0, 0));
	}
	template<class C>
	void trace(C tr, const float velocity) {
		int cnt = 0;
		float integral = 0;
		while (1) {
			if (tr.getRemain() < 5.0f)
				break;
			Thread::signal_wait(0x01);
			Position dir = tr.getNextDir(getRelativePosition(), velocity);
			integral += dir.theta * TRAJECTORY_INT_GAIN * MOVE_ACTION_PERIOD / 1000000;
			sc->set_target(velocity, (dir.theta + integral) * TRAJECTORY_PROP_GAIN);
			if (cnt++ % 20 == 0) {
//				printf("%.1f\t%.3f\n", dir.x, dir.theta);
			}
		}
		sc->set_target(velocity, 0);
		updateOrigin(tr.getEndPosition());
	}
	void searchRun() {
		const float velocity = 200;
		while (1) {
			while (q.empty()) {
				Thread::signal_wait(0x01);
				sc->set_target(velocity, -getRelativePosition().y * 1);
//				wall_avoid();
			}
			struct Operation operation = q.front();
			enum ACTION action = operation.action;
			int num = operation.num;
			printf("%s: %d\n", action_string(action), num);
			printPosition("Start");
			switch (action) {
			case START_STEP:
				setPosition();
				straight_x(SEGMENT_WIDTH - MACHINE_TAIL_LENGTH - WALL_THICKNESS / 2, velocity, velocity);
				break;
			case START_INIT:
				straight_x(SEGMENT_WIDTH / 2, velocity, 0);
				wall_attach();
				turn(M_PI / 2);
				wall_attach();
				turn(M_PI / 2);
				for (int i = 0; i < 100; i++) {
					sc->set_target(-i, 0);
					Thread::wait(1);
				}
				Thread::wait(200);
				sc->disable();
				mt->drive(-60, -60);
				Thread::wait(400);
				mt->drive(0, 0);
				while (q.size()) {
					q.pop();
				}
				return;
			case GO_STRAIGHT:
				straight_x(SEGMENT_WIDTH * num, velocity * 2, velocity);
				break;
			case GO_HALF:
				straight_x(SEGMENT_WIDTH / 2 * num, velocity, velocity);
				break;
			case TURN_LEFT_90:
				for (int i = 0; i < num; i++) {
					Curve90 tr(false);
					straight_x(tr.straight, velocity, tr.velocity);
					trace(tr, tr.velocity);
					straight_x(tr.straight, velocity, velocity);
				}
				break;
			case TURN_RIGHT_90:
				for (int i = 0; i < num; i++) {
					Curve90 tr(true);
					straight_x(tr.straight, velocity, tr.velocity);
					trace(tr, tr.velocity);
					straight_x(tr.straight, velocity, velocity);
				}
				break;
			case RETURN:
				if (mpu->angle.z > 0) {
					wall_attach();
					turn(-M_PI / 2);
					wall_attach();
					turn(-M_PI / 2);
				} else {
					wall_attach();
					turn(M_PI / 2);
					wall_attach();
					turn(M_PI / 2);
				}
				break;
			case STOP:
				straight_x(SEGMENT_WIDTH / 2, velocity, 0);
				wall_attach();
				break;
			}
			q.pop();
			printPosition("End");
		}
	}
	void replace(string &src, const string from, const string to) {
		string::size_type pos = 0;
		while (pos = src.find(from, pos), pos != string::npos) {
			src.replace(pos, from.length(), to);
//			pos += to.length();
		}
	}
	void fastRun() {
		if (path[0] != 'x' && path[0] != 'c' && path[0] != 'z') {
			path = "x" + path + "x";
		}

		printf("Path: %s\n", path.c_str());
		replace(path, "s", "xx");
		replace(path, "L", "ll");
		replace(path, "R", "rr");

		replace(path, "rllllr", "rlqlr");
		replace(path, "lrrrrl", "lrerl");

		replace(path, "xllr", "zlr");
		replace(path, "xrrl", "crl");
		replace(path, "lrrx", "lrC");
		replace(path, "rllx", "rlZ");

		replace(path, "xllllr", "alr");
		replace(path, "xrrrrl", "drl");
		replace(path, "rllllx", "rlA");
		replace(path, "lrrrrx", "lrD");

		replace(path, "xllllx", "Q");
		replace(path, "xrrrrx", "E");

		replace(path, "rllr", "rlwlr");
		replace(path, "lrrl", "lrWrl");

		replace(path, "rl", "");
		replace(path, "lr", "");
		replace(path, "rr", "R");
		replace(path, "ll", "L");
		printf("Path: %s\n", path.c_str());

#if HALF_SIZE
		const float v_max = 600;
		const float curve_gain = 0.4f;
#else
		const float v_max = 1200;
		const float curve_gain = 0.5f;
#endif
		setPosition();
		printPosition("S");
		int path_index = 0;
		float straight = SEGMENT_WIDTH / 2 - MACHINE_TAIL_LENGTH - WALL_THICKNESS / 2;
		while (1) {
			if (path_index > (int) path.size() - 1)
				break;
			switch (path[path_index]) {
			case FAST_TURN_LEFT_60: {
				C60 tr(false);
				straight += tr.straight1;
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
				straight += tr.straight2;
			}
				break;
			case FAST_TURN_RIGHT_60: {
				C60 tr(true);
				straight += tr.straight1;
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
				straight += tr.straight2;
			}
				break;
			case FAST_TURN_LEFT_60R: {
				C60 tr(false);
				straight += tr.straight2;
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain, false);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
				straight += tr.straight1;
			}
				break;
			case FAST_TURN_RIGHT_60R: {
				C60 tr(true);
				straight += tr.straight2;
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain, false);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
				straight += tr.straight1;
			}
				break;
			case FAST_TURN_LEFT_30: {
				C30 tr(false);
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain, false);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
			}
				break;
			case FAST_TURN_RIGHT_30: {
				C30 tr(true);
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain, false);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
			}
				break;
			case FAST_TURN_LEFT_120: {
				C120 tr(false);
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain, false);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
			}
				break;
			case FAST_TURN_RIGHT_120: {
				C120 tr(true);
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain, false);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
			}
				break;
			case FAST_TURN_LEFT_90: {
				C90 tr(false);
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
			}
				break;
			case FAST_TURN_RIGHT_90: {
				C90 tr(true);
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
			}
				break;
			case FAST_TURN_LEFT_150: {
				C150 tr(false);
				straight += tr.straight1;
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
				straight += tr.straight2;
			}
				break;
			case FAST_TURN_RIGHT_150: {
				C150 tr(true);
				straight += tr.straight1;
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
				straight += tr.straight2;
			}
				break;
			case FAST_TURN_LEFT_150R: {
				C150 tr(false);
				straight += tr.straight2;
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain, false);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
				straight += tr.straight1;
			}
				break;
			case FAST_TURN_RIGHT_150R: {
				C150 tr(true);
				straight += tr.straight2;
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain, false);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
				straight += tr.straight1;
			}
				break;
			case FAST_TURN_LEFT_180: {
				C180 tr(false);
				straight += tr.straight;
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
				straight += tr.straight;
			}
				break;
			case FAST_TURN_RIGHT_180: {
				C180 tr(true);
				straight += tr.straight;
				if (straight > 1.0f) {
					straight_x(straight, v_max, tr.velocity * curve_gain);
					straight = 0;
				}
				trace(tr, tr.velocity * curve_gain);
				straight += tr.straight;
			}
				break;
			case FAST_GO_STRAIGHT:
				straight += SEGMENT_WIDTH;
				break;
			case FAST_GO_HALF:
				straight += SEGMENT_WIDTH / 2;
				break;
			}
			path_index++;
		}

		printPosition("E");
		if (straight > 1.0f) {
			straight_x(straight, v_max, 0);
			straight = 0;
		}
		printPosition("E");
		wall_attach();
		sc->set_target(0, 0);
		Thread::wait(100);
		sc->disable();
		rfl->disable();
		path.clear();
		printPosition("E");
	}
};

#endif /* MOVEACTION_H_ */
